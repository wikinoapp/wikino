# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `html-pipeline` gem.
# Please instead update this file by running `bin/tapioca gem html-pipeline`.


# source://html-pipeline//lib/html_pipeline.rb#22
class HTMLPipeline
  # @raise [ArgumentError]
  # @return [HTMLPipeline] a new instance of HTMLPipeline
  #
  # source://html-pipeline//lib/html_pipeline.rb#114
  def initialize(text_filters: T.unsafe(nil), convert_filter: T.unsafe(nil), sanitization_config: T.unsafe(nil), node_filters: T.unsafe(nil), default_context: T.unsafe(nil), result_class: T.unsafe(nil)); end

  # Apply all filters in the pipeline to the given HTML.
  #
  # html    - A UTF-8 String comprised of HTML.
  # context - The context hash passed to each filter. See the Filter docs
  #           for more info on possible values. This object MUST NOT be modified
  #           in place by filters.  Use the Result for passing state back.
  # result  - The result Hash passed to each filter for modification.  This
  #           is where Filters store extracted information from the content.
  #
  # Returns the result Hash after being filtered by this Pipeline.  Contains an
  # :output key with the String HTML markup based on the
  # output of the last filter in the pipeline.
  #
  # source://html-pipeline//lib/html_pipeline.rb#149
  def call(text, context: T.unsafe(nil), result: T.unsafe(nil)); end

  # Internal: Default payload for instrumentation.
  #
  # Accepts a Hash of additional payload data to be merged.
  #
  # Returns a Hash.
  #
  # source://html-pipeline//lib/html_pipeline.rb#259
  def default_payload(payload = T.unsafe(nil)); end

  # Internal: if the `instrumentation_service` object is set, instruments the
  # block, otherwise the block is ran without instrumentation.
  #
  # Returns the result of the provided block.
  #
  # source://html-pipeline//lib/html_pipeline.rb#247
  def instrument(event, payload = T.unsafe(nil), &block); end

  # source://html-pipeline//lib/html_pipeline.rb#103
  def instrumentation_name; end

  # Public: String name for this Pipeline. Defaults to Class name.
  #
  # source://html-pipeline//lib/html_pipeline.rb#101
  def instrumentation_name=(_arg0); end

  # Public: Instrumentation service for the pipeline.
  # Set an ActiveSupport::Notifications compatible object to enable.
  #
  # source://html-pipeline//lib/html_pipeline.rb#98
  def instrumentation_service; end

  # Public: Instrumentation service for the pipeline.
  # Set an ActiveSupport::Notifications compatible object to enable.
  #
  # source://html-pipeline//lib/html_pipeline.rb#98
  def instrumentation_service=(_arg0); end

  # Public: Returns an Array of Filter objects for this Pipeline.
  #
  # source://html-pipeline//lib/html_pipeline.rb#91
  def node_filters; end

  # Internal: Applies a specific filter to the supplied doc.
  #
  # The filter is instrumented.
  #
  # Returns the result of the filter.
  #
  # source://html-pipeline//lib/html_pipeline.rb#211
  def perform_filter(filter, doc, context: T.unsafe(nil), result: T.unsafe(nil)); end

  # Public: A hash representing the sanitization configuration settings
  #
  # source://html-pipeline//lib/html_pipeline.rb#94
  def sanitization_config; end

  # Public: setup instrumentation for this pipeline.
  #
  # Returns nothing.
  #
  # source://html-pipeline//lib/html_pipeline.rb#237
  def setup_instrumentation(name, service: T.unsafe(nil)); end

  # Public: Returns an Array of Filter objects for this Pipeline.
  #
  # source://html-pipeline//lib/html_pipeline.rb#91
  def text_filters; end

  # Like call but guarantee the value returned is a string of HTML markup.
  #
  # source://html-pipeline//lib/html_pipeline.rb#224
  def to_html(input, context: T.unsafe(nil), result: T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://html-pipeline//lib/html_pipeline.rb#280
  def correctly_ancestored?(filter, klass); end

  # source://html-pipeline//lib/html_pipeline.rb#263
  def validate_filter(filter, klass); end

  # source://html-pipeline//lib/html_pipeline.rb#269
  def validate_filters(filters, klass); end

  class << self
    # Public: Default instrumentation service for new pipeline objects.
    #
    # source://html-pipeline//lib/html_pipeline.rb#111
    def default_instrumentation_service; end

    # Public: Default instrumentation service for new pipeline objects.
    #
    # source://html-pipeline//lib/html_pipeline.rb#111
    def default_instrumentation_service=(_arg0); end

    # source://html-pipeline//lib/html_pipeline.rb#86
    def define_dependency_loaded_method(name, value); end

    # source://html-pipeline//lib/html_pipeline.rb#45
    def optional_dependency(name, requirer); end

    # source://html-pipeline//lib/html_pipeline.rb#57
    def require_dependencies(names, requirer); end

    # source://html-pipeline//lib/html_pipeline.rb#50
    def require_dependency(name, requirer); end
  end
end

# source://html-pipeline//lib/html_pipeline/convert_filter.rb#4
class HTMLPipeline::ConvertFilter < ::HTMLPipeline::Filter
  # @return [ConvertFilter] a new instance of ConvertFilter
  #
  # source://html-pipeline//lib/html_pipeline/convert_filter.rb#7
  def initialize(context: T.unsafe(nil), result: T.unsafe(nil)); end

  # Returns the value of attribute html.
  #
  # source://html-pipeline//lib/html_pipeline/convert_filter.rb#5
  def html; end

  # Returns the value of attribute text.
  #
  # source://html-pipeline//lib/html_pipeline/convert_filter.rb#5
  def text; end

  class << self
    # source://html-pipeline//lib/html_pipeline/convert_filter.rb#12
    def call(text, context: T.unsafe(nil), result: T.unsafe(nil)); end
  end
end

# Base class for user content HTML filters. Each filter takes an
# HTML string, performs modifications on it, and/or writes information to a result hash.
# Filters must return a String with HTML markup.
#
# The `context` Hash passes options to filters and should not be changed in
# place. A `result` Hash allows filters to make extracted information
# available to the caller, and is mutable.
#
# Common context options:
#   :base_url   - The site's base URL
#   :repository - A Repository providing context for the HTML being processed
#
# Each filter may define additional options and output values. See the class
# docs for more info.
#
# source://html-pipeline//lib/html_pipeline/filter.rb#18
class HTMLPipeline::Filter
  # @return [Filter] a new instance of Filter
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#21
  def initialize(context: T.unsafe(nil), result: T.unsafe(nil)); end

  # The site's base URL provided in the context hash, or '/' when no
  # base URL was specified.
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#58
  def base_url; end

  # The main filter entry point. The doc attribute is guaranteed to be a
  # string when invoked. Subclasses should modify
  # this text in place or extract information and add it to the context
  # hash.
  #
  # @raise [NoMethodError]
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#41
  def call; end

  # Public: Returns a simple Hash used to pass extra information into filters
  # and also to allow filters to make extracted information available to the
  # caller.
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#30
  def context; end

  # Public: Returns a simple Hash used to pass extra information into filters
  # and also to allow filters to make extracted information available to the
  # caller.
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#30
  def context=(_arg0); end

  # Helper method for filter subclasses used to determine if any of a node's
  # ancestors have one of the tag names specified.
  #
  # node - The Node object to check.
  # tags - An array of tag name strings to check. These should be downcase.
  #
  # Returns true when the node has a matching ancestor.
  #
  # @return [Boolean]
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#69
  def has_ancestor?(element, ancestor); end

  # Validator for required context. This will check that anything passed in
  # contexts exists in @contexts
  #
  # If any errors are found an ArgumentError will be raised with a
  # message listing all the missing contexts and the filters that
  # require them.
  #
  # @raise [ArgumentError]
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#80
  def needs(*keys); end

  # Public: Returns a Hash used to allow filters to pass back information
  # to callers of the various Pipelines.  This can be used for
  # #mentioned_users, for example.
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#35
  def result; end

  # Make sure the context has everything we need. Noop: Subclasses can override.
  #
  # source://html-pipeline//lib/html_pipeline/filter.rb#54
  def validate; end

  class << self
    # Perform a filter on doc with the given context.
    #
    # Returns a String comprised of HTML markup.
    #
    # @raise [NoMethodError]
    #
    # source://html-pipeline//lib/html_pipeline/filter.rb#49
    def call(input, context: T.unsafe(nil)); end
  end
end

# source://html-pipeline//lib/html_pipeline/filter.rb#19
class HTMLPipeline::Filter::InvalidDocumentException < ::StandardError; end

# source://html-pipeline//lib/html_pipeline.rb#42
class HTMLPipeline::InvalidFilterError < ::ArgumentError; end

# HTML processing filters and utilities. This module includes a small
# framework for defining DOM based content filters and applying them to user
# provided content.
#
# See HTMLPipeline::Filter for information on building filters.
#
# Construct a Pipeline for running multiple HTML filters.  A pipeline is created once
# with one to many filters, and it then can be `call`ed many times over the course
# of its lifetime with input.
#
# filters         - Array of Filter objects. Each must respond to call(doc,
#                   context). Filters are performed in the order provided.
# default_context - The default context hash. Values specified here will be merged
#                   into values from the each individual pipeline run.  Can NOT be
#                   nil.  Default: empty Hash.
# result_class    - The default Class of the result object for individual
#                   calls.  Default: Hash.  Protip:  Pass in a Struct to get
#                   some semblance of type safety.
#
# source://html-pipeline//lib/html_pipeline.rb#41
class HTMLPipeline::MissingDependencyError < ::RuntimeError; end

# source://html-pipeline//lib/html_pipeline/node_filter.rb#6
class HTMLPipeline::NodeFilter < ::HTMLPipeline::Filter
  # @return [NodeFilter] a new instance of NodeFilter
  #
  # source://html-pipeline//lib/html_pipeline/node_filter.rb#9
  def initialize(context: T.unsafe(nil), result: T.unsafe(nil)); end

  # Returns the value of attribute context.
  #
  # source://html-pipeline//lib/html_pipeline/node_filter.rb#7
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://html-pipeline//lib/html_pipeline/node_filter.rb#7
  def context=(_arg0); end

  # The String representation of the document.
  #
  # @raise [InvalidDocumentException]
  #
  # source://html-pipeline//lib/html_pipeline/node_filter.rb#15
  def html; end

  # source://html-pipeline//lib/html_pipeline/node_filter.rb#21
  def reset!; end

  class << self
    # source://html-pipeline//lib/html_pipeline/node_filter.rb#27
    def call(html, context: T.unsafe(nil), result: T.unsafe(nil)); end
  end
end

# A special filter with sanization routines and allowlists. This module defines
# what HTML is allowed in user provided content and fixes up issues with
# unbalanced tags and whatnot.
#
# See the Selma docs for more information on the underlying library:
#
# https://github.com/gjtorikian/selma/#readme
#
# This filter does not write additional information to the context.
#
# source://html-pipeline//lib/html_pipeline/sanitization_filter.rb#15
class HTMLPipeline::SanitizationFilter
  class << self
    # @raise [ArgumentError]
    #
    # source://html-pipeline//lib/html_pipeline/sanitization_filter.rb#181
    def call(html, config); end
  end
end

# The main sanitization allowlist. Only these elements and attributes are
# allowed through by default.
#
# source://html-pipeline//lib/html_pipeline/sanitization_filter.rb#20
HTMLPipeline::SanitizationFilter::DEFAULT_CONFIG = T.let(T.unsafe(nil), Hash)

# source://html-pipeline//lib/html_pipeline/sanitization_filter.rb#16
HTMLPipeline::SanitizationFilter::VALID_PROTOCOLS = T.let(T.unsafe(nil), Array)

# source://html-pipeline//lib/html_pipeline/text_filter.rb#4
class HTMLPipeline::TextFilter < ::HTMLPipeline::Filter
  # @return [TextFilter] a new instance of TextFilter
  #
  # source://html-pipeline//lib/html_pipeline/text_filter.rb#7
  def initialize(context: T.unsafe(nil), result: T.unsafe(nil)); end

  # Returns the value of attribute text.
  #
  # source://html-pipeline//lib/html_pipeline/text_filter.rb#5
  def text; end

  class << self
    # @raise [TypeError]
    #
    # source://html-pipeline//lib/html_pipeline/text_filter.rb#12
    def call(text, context: T.unsafe(nil), result: T.unsafe(nil)); end
  end
end

# source://html-pipeline//lib/html_pipeline/version.rb#4
HTMLPipeline::VERSION = T.let(T.unsafe(nil), String)
