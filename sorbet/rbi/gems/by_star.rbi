# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/by_star/all/by_star.rbi
#
# by_star-4.0.0

module ByStar
end
module ByStar::Kernel
end
module ByStar::Kernel::InTimeZone
  extend ActiveSupport::Concern
end
class Date
  include ByStar::Kernel::Date
  include ByStar::Kernel::InTimeZone
end
class Time
  include ByStar::Kernel::InTimeZone
  include ByStar::Kernel::Time
end
class DateTime < Date
  include ByStar::Kernel::InTimeZone
end
class ActiveSupport::TimeWithZone
  include ByStar::Kernel::InTimeZone
end
module ByStar::Kernel::Time
  def beginning_of_calendar_month(*args); end
  def beginning_of_fortnight; end
  def beginning_of_weekend; end
  def end_of_calendar_month(*args); end
  def end_of_fortnight; end
  def end_of_weekend; end
end
module ByStar::Kernel::Date
  def beginning_of_calendar_month(*args); end
  def beginning_of_fortnight; end
  def beginning_of_weekend; end
  def end_of_calendar_month(*args); end
  def end_of_fortnight; end
  def end_of_weekend; end
end
class ByStar::ParseError < StandardError
end
module ByStar::Normalization
  def self.apply_offset_end(time, offset); end
  def self.apply_offset_start(time, offset); end
  def self.cweek(value, options = nil); end
  def self.date(value); end
  def self.extract_range(args); end
  def self.extrapolate_year(value); end
  def self.fortnight(value, options = nil); end
  def self.fortnight_integer(value, options = nil); end
  def self.month(value, options = nil); end
  def self.month_integer(value, options = nil); end
  def self.parse_time(value); end
  def self.parse_time_chronic(value); end
  def self.parse_time_fallback(value); end
  def self.quarter(value, options = nil); end
  def self.quarter_integer(value, options = nil); end
  def self.time(value); end
  def self.time_in_units(seconds); end
  def self.try_string_to_int(value); end
  def self.week(value, options = nil); end
  def self.week_integer(value, options = nil); end
  def self.year(value, options = nil); end
  def self.year_integer(value); end
end
module ByStar::Between
  def at_time(*args); end
  def between_dates(*args); end
  def between_times(*args); end
  def by_calendar_month(*args); end
  def by_cweek(*args); end
  def by_day(*args); end
  def by_fortnight(*args); end
  def by_month(*args); end
  def by_quarter(*args); end
  def by_week(*args); end
  def by_weekend(*args); end
  def by_year(*args); end
  def next_day(options = nil); end
  def next_fortnight(options = nil); end
  def next_month(options = nil); end
  def next_week(options = nil); end
  def next_year(options = nil); end
  def past_day(options = nil); end
  def past_fortnight(options = nil); end
  def past_month(options = nil); end
  def past_week(options = nil); end
  def past_year(options = nil); end
  def today(options = nil); end
  def tomorrow(options = nil); end
  def yesterday(options = nil); end
end
module ByStar::Directional
  def after(*args); end
  def after_now(*args); end
  def before(*args); end
  def before_now(*args); end
  def newest(*args); end
  def oldest(*args); end
end
module ByStar::Base
  def by_star_end_field(options = nil); end
  def by_star_eval_index_scope(start_time, end_time, options); end
  def by_star_field(*args); end
  def by_star_offset(options = nil); end
  def by_star_start_field(options = nil); end
  def with_by_star_options(*args, &block); end
  include ByStar::Between
  include ByStar::Directional
end
module ByStar::ActiveRecord
  def next(options = nil); end
  def previous(options = nil); end
  extend ActiveSupport::Concern
end
module ByStar::ActiveRecord::ClassMethods
  def by_star_after_query(scope, field, time); end
  def by_star_before_query(scope, field, time); end
  def by_star_default_field; end
  def by_star_order(scope, order); end
  def by_star_point_overlap_query(scope, field, time); end
  def by_star_point_query(scope, field, start_time, end_time); end
  def by_star_span_loose_query(scope, start_field, end_field, start_time, end_time, options); end
  def by_star_span_overlap_query(scope, start_field, end_field, time, options); end
  def by_star_span_strict_query(scope, start_field, end_field, start_time, end_time); end
  def newest_query(options = nil); end
  def oldest_query(options = nil); end
  include ByStar::Base
end
class ActiveRecord::Base
  extend ByStar::ActiveRecord::ClassMethods
  include ByStar::ActiveRecord
end
class ActiveRecord::Relation
  extend ByStar::ActiveRecord::ClassMethods
end
