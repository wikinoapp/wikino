# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/promise.rb/all/promise.rb.rbi
#
# promise.rb-0.7.4

class Promise
  def catch(&block); end
  def defer; end
  def fulfill(value = nil); end
  def fulfilled?; end
  def initialize; end
  def notify_fulfillment; end
  def notify_rejection; end
  def pending?; end
  def promise_fulfilled(value, on_fulfill); end
  def promise_rejected(reason, on_reject); end
  def reason; end
  def reason_coercion(reason); end
  def reject(reason = nil); end
  def rejected?; end
  def rescue(&block); end
  def self.all(enumerable); end
  def self.map_value(obj); end
  def self.resolve(obj = nil); end
  def self.sync(obj); end
  def settle_from_handler(value); end
  def source; end
  def source=(arg0); end
  def state; end
  def subscribe(observer, on_fulfill_arg, on_reject_arg); end
  def sync; end
  def then(on_fulfill = nil, on_reject = nil, &block); end
  def value; end
  def wait; end
  include Promise::Observer
  include Promise::Progress
end
module Promise::Observer
  def promise_fulfilled(_value, _on_fulfill_arg); end
  def promise_rejected(_reason, _on_reject_arg); end
end
module Promise::Progress
  def on_progress(&block); end
  def progress(status); end
end
class Promise::Group
  def chain_inputs; end
  def count_promises; end
  def each_promise; end
  def initialize(result_promise, inputs); end
  def promise; end
  def promise?(obj); end
  def promise_fulfilled(_value = nil, _arg = nil); end
  def promise_rejected(reason, _arg = nil); end
  def source; end
  def source=(arg0); end
  def wait; end
  include Promise::Observer
end
class Promise::Error < RuntimeError
end
class Promise::BrokenError < Promise::Error
end
