# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `by_star` gem.
# Please instead update this file by running `bin/tapioca gem by_star`.

module ByStar; end

module ByStar::ActiveRecord
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ByStar::ActiveRecord::ClassMethods

  def next(options = T.unsafe(nil)); end
  def previous(options = T.unsafe(nil)); end
end

module ByStar::ActiveRecord::ClassMethods
  include ::ByStar::Between
  include ::ByStar::Directional
  include ::ByStar::Base

  protected

  def by_star_after_query(scope, field, time); end
  def by_star_before_query(scope, field, time); end
  def by_star_default_field; end
  def by_star_order(scope, order); end
  def by_star_point_overlap_query(scope, field, time); end
  def by_star_point_query(scope, field, start_time, end_time); end
  def by_star_span_loose_query(scope, start_field, end_field, start_time, end_time, options); end
  def by_star_span_overlap_query(scope, start_field, end_field, time, options); end
  def by_star_span_strict_query(scope, start_field, end_field, start_time, end_time); end
  def newest_query(options = T.unsafe(nil)); end
  def oldest_query(options = T.unsafe(nil)); end
end

module ByStar::Base
  include ::ByStar::Between
  include ::ByStar::Directional

  def by_star_end_field(options = T.unsafe(nil)); end
  def by_star_field(*args); end
  def by_star_offset(options = T.unsafe(nil)); end
  def by_star_start_field(options = T.unsafe(nil)); end

  protected

  def by_star_eval_index_scope(start_time, end_time, options); end

  # Wrapper function which extracts time and options for each by_star query.
  # Note the following syntax examples are valid:
  #
  #   Post.by_month                   # defaults to current time
  #   Post.by_month(2, year: 2004)    # February, 2004
  #   Post.by_month(Time.now)
  #   Post.by_month(Time.now, field: "published_at")
  #   Post.by_month(field: "published_at")
  def with_by_star_options(*args, &block); end
end

module ByStar::Between
  def at_time(*args); end
  def between_dates(*args); end
  def between_times(*args); end
  def by_calendar_month(*args); end
  def by_cweek(*args); end
  def by_day(*args); end
  def by_fortnight(*args); end
  def by_month(*args); end
  def by_quarter(*args); end
  def by_week(*args); end
  def by_weekend(*args); end
  def by_year(*args); end
  def next_day(options = T.unsafe(nil)); end
  def next_fortnight(options = T.unsafe(nil)); end
  def next_month(options = T.unsafe(nil)); end
  def next_week(options = T.unsafe(nil)); end
  def next_year(options = T.unsafe(nil)); end
  def past_day(options = T.unsafe(nil)); end
  def past_fortnight(options = T.unsafe(nil)); end
  def past_month(options = T.unsafe(nil)); end
  def past_week(options = T.unsafe(nil)); end
  def past_year(options = T.unsafe(nil)); end
  def today(options = T.unsafe(nil)); end
  def tomorrow(options = T.unsafe(nil)); end
  def yesterday(options = T.unsafe(nil)); end
end

module ByStar::Directional
  def after(*args); end
  def after_now(*args); end
  def before(*args); end
  def before_now(*args); end
  def newest(*args); end
  def oldest(*args); end
end

module ByStar::Kernel; end

module ByStar::Kernel::Date
  # A "Calendar Month" is defined as a month as it appears on a calendar, including days form
  # previous/following months which are part of the first/last weeks of the given month.
  def beginning_of_calendar_month(*args); end

  # A "Fortnight" is defined as a two week period, with the first fortnight of the
  # year beginning on 1st January.
  def beginning_of_fortnight; end

  # A "Weekend" is defined as beginning of Saturday to end of Sunday.
  # The weekend for a given date will be the the next weekend if the day Mon-Thurs,
  # otherwise the current weekend if the day is Fri-Sun.
  def beginning_of_weekend; end

  def end_of_calendar_month(*args); end
  def end_of_fortnight; end
  def end_of_weekend; end
end

module ByStar::Kernel::InTimeZone
  extend ::ActiveSupport::Concern
end

module ByStar::Kernel::Time
  # A "Calendar Month" is defined as a month as it appears on a calendar, including days form
  # previous/following months which are part of the first/last weeks of the given month.
  def beginning_of_calendar_month(*args); end

  # A "Fortnight" is defined as a two week period, with the first fortnight of the
  # year beginning on 1st January.
  def beginning_of_fortnight; end

  # A "Weekend" is defined as beginning of Saturday to end of Sunday.
  # The weekend for a given date will be the the next weekend if the day Mon-Thurs,
  # otherwise the current weekend if the day is Fri-Sun.
  def beginning_of_weekend; end

  def end_of_calendar_month(*args); end
  def end_of_fortnight; end
  def end_of_weekend; end
end

module ByStar::Normalization
  class << self
    def apply_offset_end(time, offset); end
    def apply_offset_start(time, offset); end
    def cweek(value, options = T.unsafe(nil)); end
    def date(value); end
    def extract_range(args); end
    def extrapolate_year(value); end
    def fortnight(value, options = T.unsafe(nil)); end

    # @raise [ParseError]
    def fortnight_integer(value, options = T.unsafe(nil)); end

    def month(value, options = T.unsafe(nil)); end
    def month_integer(value, options = T.unsafe(nil)); end
    def quarter(value, options = T.unsafe(nil)); end

    # @raise [ParseError]
    def quarter_integer(value, options = T.unsafe(nil)); end

    def time(value); end
    def time_in_units(seconds); end
    def try_string_to_int(value); end
    def week(value, options = T.unsafe(nil)); end

    # @raise [ParseError]
    def week_integer(value, options = T.unsafe(nil)); end

    def year(value, options = T.unsafe(nil)); end
    def year_integer(value); end

    private

    def parse_time(value); end
    def parse_time_chronic(value); end
    def parse_time_fallback(value); end
  end
end

class ByStar::ParseError < ::StandardError; end
