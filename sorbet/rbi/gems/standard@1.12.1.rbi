# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `standard` gem.
# Please instead update this file by running `bin/tapioca gem standard`.

module RuboCop; end
module RuboCop::Cop; end

# @deprecated IgnoredPattern class has been replaced with AllowedPattern.
RuboCop::Cop::IgnoredPattern = RuboCop::Cop::AllowedPattern

# This cop checks for assignments in the conditions of
# if/while/until.
#
# `AllowSafeAssignment` option for safe assignment.
# By safe assignment we mean putting parentheses around
# an assignment to indicate "I know I'm using an assignment
# as a condition. It's not a mistake."
#
# @example
#   # bad
#   if some_var = true
#   do_something
#   end
#
#   # good
#   if some_var == true
#   do_something
#   end
# @example AllowSafeAssignment: true (default)
#   # good
#   if (some_var = true)
#   do_something
#   end
# @example AllowSafeAssignment: false
#   # bad
#   if (some_var = true)
#   do_something
#   end
class RuboCop::Cop::Lint::AssignmentInCondition < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::SafeAssignment

  def message(_); end
  def on_if(node); end
  def on_until(node); end
  def on_while(node); end

  private

  # @return [Boolean]
  def allowed_construct?(asgn_node); end

  # @return [Boolean]
  def conditional_assignment?(asgn_node); end

  # @return [Boolean]
  def skip_children?(asgn_node); end

  def traverse_node(node, &block); end
end

RuboCop::Cop::Lint::AssignmentInCondition::ASGN_TYPES = T.let(T.unsafe(nil), Array)
RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITHOUT_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)
RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITH_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)
module RuboCop::Cop::Standard; end

# Check for uses of braces around single line blocks, but allows either
# braces or do/end for multi-line blocks.
#
# @example
#   # bad - single line block
#   items.each do |item| item / 5 end
#
#   # good - single line block
#   items.each { |item| item / 5 }
class RuboCop::Cop::Standard::BlockSingleLineBraces < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  def on_block(node); end
  def on_send(node); end

  private

  def autocorrect(corrector, node); end

  # @return [Boolean]
  def correction_would_break_code?(node); end

  def get_blocks(node, &block); end
  def message(node); end

  # @return [Boolean]
  def proper_block_style?(node); end

  def replace_do_end_with_braces(corrector, loc); end

  # @return [Boolean]
  def whitespace_after?(range, length = T.unsafe(nil)); end
end

# This class wraps the `Parser::Source::Comment` object that represents a
# cops it contains.
class RuboCop::DirectiveComment
  # @return [DirectiveComment] a new instance of DirectiveComment
  def initialize(comment, cop_registry = T.unsafe(nil)); end

  # Checks if all cops specified in this directive
  #
  # @return [Boolean]
  def all_cops?; end

  # Returns the value of attribute comment.
  def comment; end

  # Returns array of specified in this directive cop names
  def cop_names; end

  # Returns the value of attribute cop_registry.
  def cop_registry; end

  # Returns the value of attribute cops.
  def cops; end

  # Returns array of specified in this directive department names
  # when all department disabled
  def department_names; end

  def directive_count; end

  # Checks if this directive disables cops
  #
  # @return [Boolean]
  def disabled?; end

  # Checks if this directive disables all cops
  #
  # @return [Boolean]
  def disabled_all?; end

  # Checks if this directive enables cops
  #
  # @return [Boolean]
  def enabled?; end

  # Checks if this directive enables all cops
  #
  # @return [Boolean]
  def enabled_all?; end

  # Checks if directive departments include cop
  #
  # @return [Boolean]
  def in_directive_department?(cop); end

  # Returns line number for directive
  def line_number; end

  # Checks if this directive contains all the given cop names
  #
  # @return [Boolean]
  def match?(cop_names); end

  # Returns match captures to directive comment pattern
  def match_captures; end

  # Returns the value of attribute mode.
  def mode; end

  # Checks if cop department has already used in directive comment
  #
  # @return [Boolean]
  def overridden_by_department?(cop); end

  def range; end

  # Checks if this directive relates to single line
  #
  # @return [Boolean]
  def single_line?; end

  private

  def all_cop_names; end
  def cop_names_for_department(department); end

  # @return [Boolean]
  def department?(name); end

  def exclude_redundant_directive_cop(cops); end
  def parsed_cop_names; end
  def splitted_cops_string; end

  class << self
    def before_comment(line); end
  end
end

# @api private
RuboCop::DirectiveComment::COPS_PATTERN = T.let(T.unsafe(nil), String)

# @api private
RuboCop::DirectiveComment::COP_NAMES_PATTERN = T.let(T.unsafe(nil), String)

# @api private
RuboCop::DirectiveComment::COP_NAME_PATTERN = T.let(T.unsafe(nil), String)

# @api private
RuboCop::DirectiveComment::DIRECTIVE_COMMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api private
RuboCop::DirectiveComment::REDUNDANT_DIRECTIVE_COP = T.let(T.unsafe(nil), String)

# @api private
RuboCop::DirectiveComment::REDUNDANT_DIRECTIVE_COP_DEPARTMENT = T.let(T.unsafe(nil), String)

RuboCop::NodePattern = RuboCop::AST::NodePattern
RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource
RuboCop::Token = RuboCop::AST::Token
module Standard; end

class Standard::BuildsConfig
  # @return [BuildsConfig] a new instance of BuildsConfig
  def initialize; end

  def call(argv, search_path = T.unsafe(nil)); end

  private

  def determine_yaml_file(argv, search_path, option_name, default_file); end
end

class Standard::Cli
  # @return [Cli] a new instance of Cli
  def initialize(argv); end

  def run; end
end

class Standard::Config < ::Struct
  # Returns the value of attribute paths
  #
  # @return [Object] the current value of paths
  def paths; end

  # Sets the attribute paths
  #
  # @param value [Object] the value to set the attribute paths to.
  # @return [Object] the newly set value
  def paths=(_); end

  # Returns the value of attribute rubocop_config_store
  #
  # @return [Object] the current value of rubocop_config_store
  def rubocop_config_store; end

  # Sets the attribute rubocop_config_store
  #
  # @param value [Object] the value to set the attribute rubocop_config_store to.
  # @return [Object] the newly set value
  def rubocop_config_store=(_); end

  # Returns the value of attribute rubocop_options
  #
  # @return [Object] the current value of rubocop_options
  def rubocop_options; end

  # Sets the attribute rubocop_options
  #
  # @param value [Object] the value to set the attribute rubocop_options to.
  # @return [Object] the newly set value
  def rubocop_options=(_); end

  # Returns the value of attribute runner
  #
  # @return [Object] the current value of runner
  def runner; end

  # Sets the attribute runner
  #
  # @param value [Object] the value to set the attribute runner to.
  # @return [Object] the newly set value
  def runner=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Standard::CreatesConfigStore
  # @return [CreatesConfigStore] a new instance of CreatesConfigStore
  def initialize; end

  def call(standard_config); end
end

class Standard::CreatesConfigStore::AssignsRubocopYaml
  def call(config_store, standard_config); end

  private

  def rubocop_yaml_path(desired_version); end
end

class Standard::CreatesConfigStore::ConfiguresIgnoredPaths
  def call(options_config, standard_config); end

  private

  # @return [Boolean]
  def absolute?(path); end

  def absolutify(config_root, path); end
  def ignored_patterns(standard_config); end
end

Standard::CreatesConfigStore::ConfiguresIgnoredPaths::DEFAULT_IGNORES = T.let(T.unsafe(nil), Array)

class Standard::CreatesConfigStore::SetsTargetRubyVersion
  def call(options_config, standard_config); end

  private

  def max_rubocop_supported_version(desired_version); end
  def normalize_version(version); end
end

class Standard::DetectsFixability
  def call(offenses); end

  private

  def cop_instance(cop_name); end
end

class Standard::FileFinder
  def call(name, search_path); end
end

class Standard::Formatter < ::RuboCop::Formatter::BaseFormatter
  # @return [Formatter] a new instance of Formatter
  def initialize(*args); end

  def file_finished(file, offenses); end
  def finished(inspected_files); end
  def started(_target_files); end

  private

  # @return [Boolean]
  def auto_correct_option_provided?; end

  def path_to(file); end
  def print_fix_suggestion_once(offenses); end
  def print_header_once; end
  def print_todo_congratulations; end
  def print_todo_warning; end

  # @return [Boolean]
  def should_suggest_fix?(offenses); end

  class << self
    def fixable_error_message(command); end
  end
end

Standard::Formatter::STANDARD_GREETING = T.let(T.unsafe(nil), String)

class Standard::LoadsRunner
  # Warning: clever metaprogramming. 99% of the time this is Runners::Rubocop
  def call(command); end
end

class Standard::LoadsYamlConfig
  def call(standard_yaml_path, todo_yaml_path); end

  private

  def arrayify(object); end
  def construct_config(yaml_path, standard_yaml, todo_path, todo_yaml); end
  def expand_ignore_config(ignore_config); end
  def load_standard_yaml(yaml_path); end
  def normalized_ruby_version(version); end
end

class Standard::MergesSettings
  def call(argv, standard_yaml); end

  private

  def determine_command(argv); end
  def merge(standard_yaml, standard_cli_flags, rubocop_cli_flags); end
  def parse_standard_argv(argv); end
  def separate_argv(argv); end
  def without_banned(rubocop_cli_flags); end
end

class Standard::MergesSettings::Settings < ::Struct
  # Returns the value of attribute options
  #
  # @return [Object] the current value of options
  def options; end

  # Sets the attribute options
  #
  # @param value [Object] the value to set the attribute options to.
  # @return [Object] the newly set value
  def options=(_); end

  # Returns the value of attribute paths
  #
  # @return [Object] the current value of paths
  def paths; end

  # Sets the attribute paths
  #
  # @param value [Object] the value to set the attribute paths to.
  # @return [Object] the newly set value
  def paths=(_); end

  # Returns the value of attribute runner
  #
  # @return [Object] the current value of runner
  def runner; end

  # Sets the attribute runner
  #
  # @param value [Object] the value to set the attribute runner to.
  # @return [Object] the newly set value
  def runner=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class Standard::ParsesCliOption
  def argv_value_for(argv, option_name); end
  def call(argv, option_name); end
end

class Standard::Railtie < ::Rails::Railtie; end
Standard::VERSION = T.let(T.unsafe(nil), Gem::Version)
