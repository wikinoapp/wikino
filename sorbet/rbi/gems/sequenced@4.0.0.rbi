# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sequenced` gem.
# Please instead update this file by running `bin/tapioca gem sequenced`.


class ActiveRecord::Base
  include ::ActiveModel::Access
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  include ::Sequenced::ActsAsSequenced
  extend ::ByStar::Between
  extend ::ByStar::Directional
  extend ::ByStar::Base
  extend ::Sequenced::ActsAsSequenced::ClassMethods
end

# source://sequenced//lib/sequenced/generator.rb#1
module Sequenced; end

# source://sequenced//lib/sequenced/acts_as_sequenced.rb#5
module Sequenced::ActsAsSequenced
  mixes_in_class_methods ::Sequenced::ActsAsSequenced::ClassMethods

  class << self
    # @private
    #
    # source://sequenced//lib/sequenced/acts_as_sequenced.rb#12
    def included(base); end
  end
end

# source://sequenced//lib/sequenced/acts_as_sequenced.rb#16
module Sequenced::ActsAsSequenced::ClassMethods
  # Public: Defines ActiveRecord callbacks to set a sequential ID scoped
  # on a specific class.
  #
  # Can be called multiple times to add hooks for different column names.
  #
  # options - The Hash of options for configuration:
  #           :scope    - The Symbol representing the columm on which the
  #                       sequential ID should be scoped (default: nil)
  #           :column   - The Symbol representing the column that stores the
  #                       sequential ID (default: :sequential_id)
  #           :start_at - The Integer value at which the sequence should
  #                       start (default: 1)
  #           :skip     - Skips the sequential ID generation when the lambda
  #                       expression evaluates to nil. Gets passed the
  #                       model object
  #
  # Examples
  #
  #   class Answer < ActiveRecord::Base
  #     belongs_to :question
  #     acts_as_sequenced :scope => :question_id
  #   end
  #
  # Returns nothing.
  #
  # source://sequenced//lib/sequenced/acts_as_sequenced.rb#41
  def acts_as_sequenced(options = T.unsafe(nil)); end
end

# source://sequenced//lib/sequenced/acts_as_sequenced.rb#6
Sequenced::ActsAsSequenced::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://sequenced//lib/sequenced/acts_as_sequenced.rb#66
module Sequenced::ActsAsSequenced::InstanceMethods
  # source://sequenced//lib/sequenced/acts_as_sequenced.rb#67
  def set_sequential_ids; end
end

# source://sequenced//lib/sequenced/acts_as_sequenced.rb#10
class Sequenced::ActsAsSequenced::SequencedColumnExists < ::StandardError; end

# source://sequenced//lib/sequenced/generator.rb#2
class Sequenced::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://sequenced//lib/sequenced/generator.rb#5
  def initialize(record, options = T.unsafe(nil)); end

  # Returns the value of attribute column.
  #
  # source://sequenced//lib/sequenced/generator.rb#3
  def column; end

  # @return [Boolean]
  #
  # source://sequenced//lib/sequenced/generator.rb#19
  def id_set?; end

  # source://sequenced//lib/sequenced/generator.rb#27
  def next_id; end

  # source://sequenced//lib/sequenced/generator.rb#33
  def next_id_in_sequence; end

  # Returns the value of attribute record.
  #
  # source://sequenced//lib/sequenced/generator.rb#3
  def record; end

  # Returns the value of attribute scope.
  #
  # source://sequenced//lib/sequenced/generator.rb#3
  def scope; end

  # source://sequenced//lib/sequenced/generator.rb#13
  def set; end

  # Returns the value of attribute skip.
  #
  # source://sequenced//lib/sequenced/generator.rb#3
  def skip; end

  # @return [Boolean]
  #
  # source://sequenced//lib/sequenced/generator.rb#23
  def skip?; end

  # Returns the value of attribute start_at.
  #
  # source://sequenced//lib/sequenced/generator.rb#3
  def start_at; end

  # @return [Boolean]
  #
  # source://sequenced//lib/sequenced/generator.rb#42
  def unique?(id); end

  private

  # source://sequenced//lib/sequenced/generator.rb#63
  def base_relation; end

  # source://sequenced//lib/sequenced/generator.rb#75
  def build_scope(*columns); end

  # source://sequenced//lib/sequenced/generator.rb#67
  def find_last_record; end

  # source://sequenced//lib/sequenced/generator.rb#52
  def lock_table; end

  # source://sequenced//lib/sequenced/generator.rb#81
  def max(*values); end

  # @return [Boolean]
  #
  # source://sequenced//lib/sequenced/generator.rb#58
  def postgresql?; end
end
