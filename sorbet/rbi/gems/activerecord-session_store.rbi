# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activerecord-session_store/all/activerecord-session_store.rbi
#
# activerecord-session_store-2.0.0

module ActiveRecord
end
module ActiveRecord::SessionStore
end
module ActionDispatch
end
module ActionDispatch::Session
end
class ActionDispatch::Session::ActiveRecordStore < ActionDispatch::Session::AbstractSecureStore
  def delete_session(request, session_id, options); end
  def find_session(request, id); end
  def get_session(request, sid); end
  def get_session_model(request, id); end
  def get_session_with_fallback(sid); end
  def logger; end
  def self.private_session_id?(session_id); end
  def self.session_class; end
  def self.session_class=(val); end
  def session_class; end
  def session_class=(val); end
  def write_session(request, sid, session_data, options); end
end
module ActionDispatch::Session::ActiveRecordStore::NilLogger
  def self.silence; end
end
class ActiveRecord::SessionStore::SqlBypass
  def connection(*, **, &); end
  def connection=(arg); end
  def connection_pool(*, **, &); end
  def connection_pool=(arg); end
  def data; end
  def data=(arg0); end
  def data_column; end
  def data_column=(val); end
  def destroy; end
  def initialize(attributes); end
  def loaded?; end
  def new_record; end
  def new_record?; end
  def persisted?; end
  def save; end
  def self.connection; end
  def self.connection=(arg0); end
  def self.connection_pool; end
  def self.connection_pool=(arg0); end
  def self.data_column; end
  def self.data_column=(val); end
  def self.data_column_name; end
  def self.find_by_session_id(session_id); end
  def self.session_id_column; end
  def self.session_id_column=(val); end
  def self.table_name; end
  def self.table_name=(val); end
  def session_id; end
  def session_id=(arg0); end
  def session_id_column; end
  def session_id_column=(val); end
  def table_name; end
  def table_name=(val); end
  extend ActiveRecord::SessionStore::ClassMethods
end
class ActiveRecord::SessionStore::Railtie < Rails::Railtie
end
module ActiveRecord::SessionStore::ClassMethods
  def create_table!; end
  def deserialize(data); end
  def drop_table!; end
  def self.serializer; end
  def self.serializer=(val); end
  def serialize(data); end
  def serializer; end
  def serializer=(val); end
  def serializer_class; end
end
class ActiveRecord::SessionStore::ClassMethods::MarshalSerializer
  def self.dump(value); end
  def self.load(value); end
end
class ActiveRecord::SessionStore::ClassMethods::JsonSerializer
  def self.dump(value); end
  def self.load(value); end
end
class ActiveRecord::SessionStore::ClassMethods::HybridSerializer < ActiveRecord::SessionStore::ClassMethods::JsonSerializer
  def self.load(value); end
  def self.needs_migration?(value); end
end
class ActiveRecord::SessionStore::ClassMethods::NullSerializer
  def self.dump(value); end
  def self.load(value); end
end
module ActiveRecord::SessionStore::Session::GeneratedAttributeMethods
end
class ActiveRecord::SessionStore::Session < ActiveRecord::Base
  def data; end
  def data=(arg0); end
  def data_column_name; end
  def data_column_name=(val); end
  def initialize(*arg0); end
  def loaded?; end
  def raise_on_session_data_overflow!; end
  def secure!; end
  def serialize_data!; end
  extend ActiveRecord::SessionStore::ClassMethods
  include ActiveRecord::SessionStore::Session::GeneratedAssociationMethods
  include ActiveRecord::SessionStore::Session::GeneratedAttributeMethods
end
module ActiveRecord::SessionStore::Session::GeneratedAssociationMethods
end
class ActiveRecord::SessionStore::Session::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SessionStore::Session::GeneratedRelationMethods
end
module ActiveRecord::SessionStore::Session::GeneratedRelationMethods
end
class ActiveRecord::SessionStore::Session::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SessionStore::Session::GeneratedRelationMethods
end
class ActiveRecord::SessionStore::Session::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SessionStore::Session::GeneratedRelationMethods
end
class ActiveRecord::SessionStore::Session::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SessionStore::Session::GeneratedRelationMethods
end
