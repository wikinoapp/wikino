# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `selma` gem.
# Please instead update this file by running `bin/tapioca gem selma`.


# source://selma//lib/selma/sanitizer/config.rb#5
module Selma; end

# source://selma//lib/selma/html/element.rb#4
class Selma::HTML; end

# source://selma//lib/selma/html/element.rb#5
class Selma::HTML::Element
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def after(*_arg0); end
  def ancestors; end
  def append(*_arg0); end
  def attributes; end

  # @return [Boolean]
  #
  # source://selma//lib/selma/html/element.rb#6
  def available?; end

  def before(*_arg0); end
  def has_attribute?(_arg0); end
  def prepend(*_arg0); end
  def remove; end
  def remove_and_keep_content; end
  def remove_attribute(_arg0); end
  def removed?; end
  def self_closing?; end
  def set_inner_content(*_arg0); end
  def tag_name; end
  def tag_name=(_arg0); end
end

class Selma::HTML::EndTag
  def tag_name; end
end

class Selma::HTML::TextChunk
  def after(*_arg0); end
  def before(*_arg0); end
  def content; end
  def removed?; end
  def replace(*_arg0); end
  def text_type; end
  def to_s; end
end

# source://selma//lib/selma/rewriter.rb#4
class Selma::Rewriter
  def rewrite(_arg0); end

  class << self
    def new(*_arg0); end
  end
end

# source://selma//lib/selma/sanitizer/config.rb#6
class Selma::Sanitizer
  def config; end

  class << self
    def new(*_arg0); end
  end
end

# source://selma//lib/selma/sanitizer/config.rb#7
module Selma::Sanitizer::Config
  class << self
    # Returns `true` if `dup` may be safely called on _value_, `false`
    # otherwise.
    #
    # @return [Boolean]
    #
    # source://selma//lib/selma/sanitizer/config.rb#56
    def can_dupe?(value); end

    # Deeply freezes and returns the given configuration Hash.
    #
    # source://selma//lib/selma/sanitizer/config.rb#10
    def freeze_config(config); end

    # Returns a new Hash containing the result of deeply merging *other_config*
    # into *config*. Does not modify *config* or *other_config*.
    #
    # This is the safest way to use a built-in config as the basis for
    # your own custom config.
    #
    # @raise [ArgumentError]
    #
    # source://selma//lib/selma/sanitizer/config.rb#26
    def merge(config, other_config = T.unsafe(nil)); end
  end
end

# source://selma//lib/selma/sanitizer/config/basic.rb#6
Selma::Sanitizer::Config::BASIC = T.let(T.unsafe(nil), Hash)

# source://selma//lib/selma/sanitizer/config/default.rb#10
Selma::Sanitizer::Config::DEFAULT = T.let(T.unsafe(nil), Hash)

# source://selma//lib/selma/sanitizer/config/relaxed.rb#6
Selma::Sanitizer::Config::RELAXED = T.let(T.unsafe(nil), Hash)

# source://selma//lib/selma/sanitizer/config/restricted.rb#6
Selma::Sanitizer::Config::RESTRICTED = T.let(T.unsafe(nil), Hash)

# although there are many more protocol types, eg., ftp, xmpp, etc.,
# these are the only ones that are allowed by default
#
# source://selma//lib/selma/sanitizer/config/default.rb#8
Selma::Sanitizer::Config::VALID_PROTOCOLS = T.let(T.unsafe(nil), Array)

# source://selma//lib/selma/selector.rb#4
class Selma::Selector
  class << self
    def new(*_arg0); end
  end
end
