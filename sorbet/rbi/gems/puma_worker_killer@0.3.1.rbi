# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `puma_worker_killer` gem.
# Please instead update this file by running `bin/tapioca gem puma_worker_killer`.

module PumaWorkerKiller
  extend ::PumaWorkerKiller

  # @yield [_self]
  # @yieldparam _self [PumaWorkerKiller] the object that the method was called on
  def config; end

  def enable_rolling_restart(frequency = T.unsafe(nil), splay_seconds = T.unsafe(nil)); end

  # Returns the value of attribute frequency.
  def frequency; end

  # Sets the attribute frequency
  #
  # @param value the value to set the attribute frequency to.
  def frequency=(_arg0); end

  # Returns the value of attribute on_calculation.
  def on_calculation; end

  # Sets the attribute on_calculation
  #
  # @param value the value to set the attribute on_calculation to.
  def on_calculation=(_arg0); end

  # Returns the value of attribute percent_usage.
  def percent_usage; end

  # Sets the attribute percent_usage
  #
  # @param value the value to set the attribute percent_usage to.
  def percent_usage=(_arg0); end

  # Returns the value of attribute pre_term.
  def pre_term; end

  # Sets the attribute pre_term
  #
  # @param value the value to set the attribute pre_term to.
  def pre_term=(_arg0); end

  # Returns the value of attribute ram.
  def ram; end

  # Sets the attribute ram
  #
  # @param value the value to set the attribute ram to.
  def ram=(_arg0); end

  def reaper(ram = T.unsafe(nil), percent_usage = T.unsafe(nil), reaper_status_logs = T.unsafe(nil), pre_term = T.unsafe(nil), on_calculation = T.unsafe(nil)); end

  # Returns the value of attribute reaper_status_logs.
  def reaper_status_logs; end

  # Sets the attribute reaper_status_logs
  #
  # @param value the value to set the attribute reaper_status_logs to.
  def reaper_status_logs=(_arg0); end

  # Returns the value of attribute rolling_pre_term.
  def rolling_pre_term; end

  # Sets the attribute rolling_pre_term
  #
  # @param value the value to set the attribute rolling_pre_term to.
  def rolling_pre_term=(_arg0); end

  # Returns the value of attribute rolling_restart_frequency.
  def rolling_restart_frequency; end

  # Sets the attribute rolling_restart_frequency
  #
  # @param value the value to set the attribute rolling_restart_frequency to.
  def rolling_restart_frequency=(_arg0); end

  # Returns the value of attribute rolling_restart_splay_seconds.
  def rolling_restart_splay_seconds; end

  # Sets the attribute rolling_restart_splay_seconds
  #
  # @param value the value to set the attribute rolling_restart_splay_seconds to.
  def rolling_restart_splay_seconds=(_arg0); end

  def start(frequency = T.unsafe(nil), reaper = T.unsafe(nil)); end
end

class PumaWorkerKiller::AutoReap
  # @return [AutoReap] a new instance of AutoReap
  def initialize(timeout, reaper = T.unsafe(nil)); end

  def start; end
end

class PumaWorkerKiller::PumaMemory
  # @return [PumaMemory] a new instance of PumaMemory
  def initialize(master = T.unsafe(nil)); end

  # Will refresh @workers
  def get_total(workers = T.unsafe(nil)); end

  # Will refresh @workers
  def get_total_memory(workers = T.unsafe(nil)); end

  def largest_worker; end
  def largest_worker_memory; end

  # Returns the value of attribute master.
  def master; end

  # @return [Boolean]
  def running?; end

  def size; end
  def smallest_worker; end
  def smallest_worker_memory; end
  def term_largest_worker; end
  def term_worker(worker); end
  def workers; end

  # @return [Boolean]
  def workers_stopped?; end

  private

  def get_master; end

  # Returns sorted hash, keys are worker objects, values are memory used per worker
  # sorted by memory ascending (smallest first, largest last)
  def set_workers; end
end

class PumaWorkerKiller::Reaper
  # @return [Reaper] a new instance of Reaper
  def initialize(max_ram, master = T.unsafe(nil), reaper_status_logs = T.unsafe(nil), pre_term = T.unsafe(nil), on_calculation = T.unsafe(nil)); end

  # used for tes
  def get_total_memory; end

  def reap; end
end

class PumaWorkerKiller::RollingRestart
  # @return [RollingRestart] a new instance of RollingRestart
  def initialize(master = T.unsafe(nil), rolling_pre_term = T.unsafe(nil)); end

  # used for tes
  def get_total_memory; end

  def reap(seconds_between_worker_kill = T.unsafe(nil)); end
end

PumaWorkerKiller::VERSION = T.let(T.unsafe(nil), String)
