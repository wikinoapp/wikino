# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `view_component` gem.
# Please instead update this file by running `bin/tapioca gem view_component`.


# source://view_component//lib/view_component/base.rb#18
module ActionView; end

# source://view_component//lib/view_component/base.rb#19
class ActionView::OutputBuffer
  # source://view_component//lib/view_component/base.rb#20
  def with_buffer(buf = T.unsafe(nil)); end
end

module ERB::Escape; end

# source://view_component//lib/view_component.rb#6
module ViewComponent
  extend ::ActiveSupport::Autoload
end

# source://view_component//lib/view_component/errors.rb#213
class ViewComponent::AlreadyDefinedPolymorphicSlotSetterError < ::StandardError
  # @return [AlreadyDefinedPolymorphicSlotSetterError] a new instance of AlreadyDefinedPolymorphicSlotSetterError
  #
  # source://view_component//lib/view_component/errors.rb#218
  def initialize(setter_method_name, setter_name); end
end

# source://view_component//lib/view_component/errors.rb#214
ViewComponent::AlreadyDefinedPolymorphicSlotSetterError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/base.rb#32
class ViewComponent::Base
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActionView::Helpers
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionView::RoutingUrlFor
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ViewComponent::InlineTemplate
  include ::ViewComponent::Slotable
  include ::ViewComponent::Translatable
  include ::ViewComponent::WithContentHelper
  include ::Propshaft::Helper
  extend ::ActionView::Helpers::UrlHelper::ClassMethods
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods
  extend ::ViewComponent::InlineTemplate::ClassMethods
  extend ::ViewComponent::Slotable::ClassMethods
  extend ::ViewComponent::Translatable::ClassMethods

  # Including `Rails.application.routes.url_helpers` defines an initializer that accepts (...),
  # so we have to define our own empty initializer to overwrite it.
  #
  # @return [Base] a new instance of Base
  #
  # source://view_component//lib/view_component/base.rb#94
  def initialize; end

  # source://view_component//lib/view_component/base.rb#56
  def __vc_i18n_backend; end

  # Returns the value of attribute __vc_original_view_context.
  #
  # source://view_component//lib/view_component/base.rb#74
  def __vc_original_view_context; end

  # Sets the attribute __vc_original_view_context
  #
  # @param value the value to set the attribute __vc_original_view_context to.
  #
  # source://view_component//lib/view_component/base.rb#74
  def __vc_original_view_context=(_arg0); end

  # @private
  #
  # source://view_component//lib/view_component/base.rb#351
  def __vc_request; end

  # Called around rendering the component. Override to wrap the rendering of a
  # component in custom instrumentation, etc.
  #
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#236
  def around_render; end

  # Called before rendering the component. Override to perform operations that
  # depend on having access to the view context, such as helpers.
  #
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#228
  def before_render; end

  # source://view_component//lib/view_component/base.rb#60
  def config(*_arg0, **_arg1, &_arg2); end

  # The content passed to the component instance as a block.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#359
  def content; end

  # Whether `content` has been passed to the component.
  #
  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#376
  def content?; end

  # source://view_component//lib/view_component/base.rb#69
  def content_security_policy_nonce(*_arg0, **_arg1, &_arg2); end

  # The current controller. Use sparingly as doing so introduces coupling
  # that inhibits encapsulation & reuse, often making testing difficult.
  #
  # @raise [ControllerCalledBeforeRenderError]
  # @return [ActionController::Base]
  #
  # source://view_component//lib/view_component/base.rb#282
  def controller; end

  # Returns the value of attribute current_template.
  #
  # source://view_component//lib/view_component/base.rb#75
  def current_template; end

  # source://view_component//lib/view_component/base.rb#49
  def debug_missing_translation; end

  # source://view_component//lib/view_component/base.rb#49
  def debug_missing_translation=(val); end

  # source://view_component//lib/view_component/base.rb#50
  def default_url_options; end

  # source://view_component//lib/view_component/base.rb#50
  def default_url_options=(_arg0); end

  # source://view_component//lib/view_component/base.rb#50
  def default_url_options?; end

  # source://view_component//lib/view_component/base.rb#60
  def form_authenticity_token(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/base.rb#66
  def formats(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/base.rb#66
  def formats=(arg); end

  # A proxy through which to access helpers. Use sparingly as doing so introduces
  # coupling that inhibits encapsulation & reuse, often making testing difficult.
  #
  # @raise [HelpersCalledBeforeRenderError]
  # @return [ActionView::Base]
  #
  # source://view_component//lib/view_component/base.rb#292
  def helpers; end

  # source://view_component//lib/view_component/base.rb#63
  def lookup_context(*_arg0, **_arg1, &_arg2); end

  # @private
  #
  # source://view_component//lib/view_component/base.rb#307
  def method_missing(method_name, *args); end

  # source://view_component//lib/view_component/base.rb#63
  def output_buffer(*_arg0, **_arg1, &_arg2); end

  # Optional content to be returned after the rendered template.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#220
  def output_postamble; end

  # Optional content to be returned before the rendered template.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#213
  def output_preamble; end

  # source://view_component//lib/view_component/base.rb#60
  def protect_against_forgery?(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/base.rb#55
  def registered_slots; end

  # source://view_component//lib/view_component/base.rb#55
  def registered_slots=(_arg0); end

  # source://view_component//lib/view_component/base.rb#55
  def registered_slots?; end

  # Re-use original view_context if we're not rendering a component.
  #
  # As of v4, ViewComponent::Base re-uses the existing view context created
  # by ActionView, meaning the current view context and the original view
  # context are the same object. set_original_view_context is still called
  # to maintain backwards compatibility.
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#255
  def render(options = T.unsafe(nil), args = T.unsafe(nil), &block); end

  # Override to determine whether the ViewComponent should render.
  #
  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#243
  def render?; end

  # Entrypoint for rendering components.
  #
  # - `view_context`: ActionView context from calling view
  # - `block`: optional block to be captured within the view context
  #
  # Returns HTML that has been escaped by the respective template handler.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#105
  def render_in(view_context, &block); end

  # Subclass components that call `super` inside their template code will cause a
  # double render if they emit the result.
  #
  # ```erb
  # <%= super %> # double-renders
  # <% super %> # doesn't double-render
  # ```
  #
  # `super` also doesn't consider the current variant. `render_parent` renders the
  # parent template considering the current variant and emits the result without
  # double-rendering.
  #
  # source://view_component//lib/view_component/base.rb#182
  def render_parent; end

  # Renders the parent component to a string and returns it. This method is meant
  # to be used inside custom #call methods when a string result is desired, eg.
  #
  # ```ruby
  # def call
  #   "<div>#{render_parent_to_string}</div>"
  # end
  # ```
  #
  # When rendering the parent inside an .erb template, use `#render_parent` instead.
  #
  # source://view_component//lib/view_component/base.rb#197
  def render_parent_to_string; end

  # The current request. Use sparingly as doing so introduces coupling that
  # inhibits encapsulation & reuse, often making testing difficult.
  #
  # @return [ActionDispatch::Request]
  #
  # source://view_component//lib/view_component/base.rb#346
  def request; end

  # Components render in their own view context. Helpers and other functionality
  # require a reference to the original Rails view context, an instance of
  # `ActionView::Base`. Use this method to set a reference to the original
  # view context. Objects that implement this method will render in the component's
  # view context, while objects that don't will render in the original view context
  # so helpers, etc work as expected.
  #
  # @param view_context [ActionView::Base] The original view context.
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#86
  def set_original_view_context(view_context); end

  # For caching, such as #cache_if
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#330
  def view_cache_dependencies; end

  # source://view_component//lib/view_component/base.rb#63
  def view_flow(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/base.rb#63
  def view_renderer(*_arg0, **_arg1, &_arg2); end

  # Exposes .virtual_path as an instance method
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#324
  def virtual_path; end

  # @private
  #
  # source://view_component//lib/view_component/base.rb#381
  def with_original_virtual_path; end

  private

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#396
  def __vc_content_set_by_with_content_defined?; end

  # source://view_component//lib/view_component/base.rb#400
  def __vc_maybe_escape_html(text); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#392
  def __vc_render_in_block_provided?; end

  # source://view_component//lib/view_component/base.rb#418
  def __vc_safe_output_postamble; end

  # source://view_component//lib/view_component/base.rb#412
  def __vc_safe_output_preamble; end

  # Returns the value of attribute view_context.
  #
  # source://view_component//lib/view_component/base.rb#390
  def view_context; end

  class << self
    # @private
    #
    # source://view_component//lib/view_component/base.rb#687
    def __vc_collection_counter_parameter; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#697
    def __vc_collection_iteration_parameter; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#682
    def __vc_collection_parameter; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#562
    def __vc_compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#610
    def __vc_compiled?; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#620
    def __vc_compiler; end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#692
    def __vc_counter_argument_present?; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#615
    def __vc_ensure_compiled; end

    # source://view_component//lib/view_component/base.rb#56
    def __vc_i18n_backend; end

    # source://view_component//lib/view_component/base.rb#56
    def __vc_i18n_backend=(value); end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#702
    def __vc_iteration_argument_present?; end

    # source://view_component//lib/view_component/base.rb#72
    def __vc_strip_trailing_whitespace; end

    # source://view_component//lib/view_component/base.rb#72
    def __vc_strip_trailing_whitespace=(value); end

    # Ensure the component initializer accepts the
    # collection parameter. By default, we don't
    # validate that the default parameter name
    # is accepted, as support for collection
    # rendering is optional.
    #
    # @private
    # @raise [MissingCollectionArgumentError]
    #
    # source://view_component//lib/view_component/base.rb#662
    def __vc_validate_collection_parameter!(validate_default: T.unsafe(nil)); end

    # Ensure the component initializer doesn't define
    # invalid parameters that could override the framework's
    # methods.
    #
    # @private
    # @raise [ReservedParameterError]
    #
    # source://view_component//lib/view_component/base.rb#675
    def __vc_validate_initialization_parameters!; end

    # source://view_component//lib/view_component/base.rb#50
    def _routes; end

    # Returns the current config.
    #
    # @return [ActiveSupport::OrderedOptions]
    #
    # source://view_component//lib/view_component/base.rb#39
    def config; end

    # source://view_component//lib/view_component/base.rb#49
    def debug_missing_translation; end

    # source://view_component//lib/view_component/base.rb#49
    def debug_missing_translation=(val); end

    # source://view_component//lib/view_component/base.rb#50
    def default_url_options; end

    # source://view_component//lib/view_component/base.rb#50
    def default_url_options=(value); end

    # source://view_component//lib/view_component/base.rb#50
    def default_url_options?; end

    # source://view_component//lib/view_component/base.rb#34
    def generate(*_arg0, **_arg1, &_arg2); end

    # The file path of the component Ruby file.
    #
    # @return [String]
    #
    # source://view_component//lib/view_component/base.rb#498
    def identifier; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#501
    def identifier=(_arg0); end

    # @private
    # @private
    #
    # source://view_component//lib/view_component/base.rb#567
    def inherited(child); end

    # source://view_component//lib/view_component/base.rb#34
    def instrumentation_enabled(*_arg0, **_arg1, &_arg2); end

    # source://view_component//lib/view_component/base.rb#34
    def previews(*_arg0, **_arg1, &_arg2); end

    # source://view_component//lib/view_component/base.rb#55
    def registered_slots; end

    # source://view_component//lib/view_component/base.rb#55
    def registered_slots=(value); end

    # source://view_component//lib/view_component/base.rb#55
    def registered_slots?; end

    # Find sidecar files for the given extensions.
    #
    # The provided array of extensions is expected to contain
    # strings starting without the dot, example: `["erb", "haml"]`.
    #
    # For example, one might collect sidecar CSS files that need to be compiled.
    #
    # @param extensions [Array<String>] Extensions of which to return matching sidecar files.
    #
    # source://view_component//lib/view_component/base.rb#513
    def sidecar_files(extensions); end

    # Strips trailing whitespace from templates before compiling them.
    #
    # ```ruby
    # class MyComponent < ViewComponent::Base
    #   strip_trailing_whitespace
    # end
    # ```
    #
    # @param value [Boolean] Whether to strip newlines.
    #
    # source://view_component//lib/view_component/base.rb#645
    def strip_trailing_whitespace(value = T.unsafe(nil)); end

    # Whether trailing whitespace will be stripped before compilation.
    #
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#652
    def strip_trailing_whitespace?; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#504
    def virtual_path; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#504
    def virtual_path=(_arg0); end

    # Render a component for each element in a collection ([documentation](/guide/collections)):
    #
    # ```ruby
    # render(ProductsComponent.with_collection(@products, foo: :bar))
    # ```
    #
    # @param collection [Enumerable] A list of items to pass the ViewComponent one at a time.
    # @param spacer_component [ViewComponent::Base] Component instance to be rendered between items.
    # @param args [Arguments] Arguments to pass to the ViewComponent every time.
    #
    # source://view_component//lib/view_component/base.rb#557
    def with_collection(collection, spacer_component: T.unsafe(nil), **args); end

    # Set the parameter name used when rendering elements of a collection ([documentation](/guide/collections)):
    #
    # ```ruby
    # with_collection_parameter :item
    # ```
    #
    # @param parameter [Symbol] The parameter name used when rendering elements of a collection.
    #
    # source://view_component//lib/view_component/base.rb#631
    def with_collection_parameter(parameter); end

    private

    # source://view_component//lib/view_component/base.rb#56
    def __class_attr___vc_i18n_backend; end

    # source://view_component//lib/view_component/base.rb#56
    def __class_attr___vc_i18n_backend=(new_value); end

    # source://view_component//lib/view_component/base.rb#72
    def __class_attr___vc_strip_trailing_whitespace; end

    # source://view_component//lib/view_component/base.rb#72
    def __class_attr___vc_strip_trailing_whitespace=(new_value); end

    # source://view_component//lib/view_component/base.rb#50
    def __class_attr_default_url_options; end

    # source://view_component//lib/view_component/base.rb#50
    def __class_attr_default_url_options=(new_value); end

    # source://view_component//lib/view_component/base.rb#55
    def __class_attr_registered_slots; end

    # source://view_component//lib/view_component/base.rb#55
    def __class_attr_registered_slots=(new_value); end

    # source://view_component//lib/view_component/base.rb#712
    def __vc_initialize_parameter_names; end

    # source://view_component//lib/view_component/base.rb#721
    def __vc_initialize_parameters; end

    # source://view_component//lib/view_component/base.rb#725
    def __vc_provided_collection_parameter; end

    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#708
    def __vc_splatted_keyword_argument_present?; end
  end
end

# source://view_component//lib/view_component/errors.rb#2
class ViewComponent::BaseError < ::StandardError
  # @return [BaseError] a new instance of BaseError
  #
  # source://view_component//lib/view_component/errors.rb#3
  def initialize; end
end

# source://view_component//lib/view_component/collection.rb#6
class ViewComponent::Collection
  include ::Enumerable

  # @return [Collection] a new instance of Collection
  #
  # source://view_component//lib/view_component/collection.rb#46
  def initialize(component, object, spacer_component, **options); end

  # Returns the value of attribute component.
  #
  # source://view_component//lib/view_component/collection.rb#8
  def component; end

  # source://view_component//lib/view_component/collection.rb#18
  def each(&block); end

  # source://view_component//lib/view_component/collection.rb#12
  def render_in(view_context, &block); end

  # source://view_component//lib/view_component/collection.rb#10
  def size(*_arg0, **_arg1, &_arg2); end

  private

  # source://view_component//lib/view_component/collection.rb#53
  def collection_variable(object); end

  # source://view_component//lib/view_component/collection.rb#61
  def component_options(item, iterator); end

  # source://view_component//lib/view_component/collection.rb#32
  def components; end

  # source://view_component//lib/view_component/collection.rb#69
  def rendered_spacer(view_context); end
end

# Keeps track of which templates have already been compiled
# This isn't part of the public API
#
# source://view_component//lib/view_component/compile_cache.rb#6
module ViewComponent::CompileCache
  private

  # source://view_component//lib/view_component/compile_cache.rb#17
  def compiled?(klass); end

  # source://view_component//lib/view_component/compile_cache.rb#25
  def invalidate!; end

  # source://view_component//lib/view_component/compile_cache.rb#21
  def invalidate_class!(klass); end

  # source://view_component//lib/view_component/compile_cache.rb#13
  def register(klass); end

  class << self
    # source://view_component//lib/view_component/compile_cache.rb#7
    def cache; end

    # source://view_component//lib/view_component/compile_cache.rb#7
    def cache=(val); end

    # @return [Boolean]
    #
    # source://view_component//lib/view_component/compile_cache.rb#17
    def compiled?(klass); end

    # source://view_component//lib/view_component/compile_cache.rb#25
    def invalidate!; end

    # source://view_component//lib/view_component/compile_cache.rb#21
    def invalidate_class!(klass); end

    # source://view_component//lib/view_component/compile_cache.rb#13
    def register(klass); end
  end
end

# source://view_component//lib/view_component/compiler.rb#6
class ViewComponent::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://view_component//lib/view_component/compiler.rb#13
  def initialize(component); end

  # source://view_component//lib/view_component/compiler.rb#11
  def __vc_development_mode; end

  # source://view_component//lib/view_component/compiler.rb#11
  def __vc_development_mode=(_arg0); end

  # source://view_component//lib/view_component/compiler.rb#11
  def __vc_development_mode?; end

  # source://view_component//lib/view_component/compiler.rb#22
  def compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/compiler.rb#18
  def compiled?; end

  # @param requested_details [ActionView::TemplateDetails::Requested] i.e. locales, formats, variants
  # @return all matching compiled templates, in priority order based on the requested details from LookupContext
  #
  # source://view_component//lib/view_component/compiler.rb#61
  def find_templates_for(requested_details); end

  private

  # source://view_component//lib/view_component/compiler.rb#79
  def define_render_template_for; end

  # source://view_component//lib/view_component/compiler.rb#168
  def gather_templates; end

  # source://view_component//lib/view_component/compiler.rb#105
  def template_errors; end

  # Returns the value of attribute templates.
  #
  # source://view_component//lib/view_component/compiler.rb#77
  def templates; end

  class << self
    # source://view_component//lib/view_component/compiler.rb#11
    def __vc_development_mode; end

    # source://view_component//lib/view_component/compiler.rb#11
    def __vc_development_mode=(value); end

    # source://view_component//lib/view_component/compiler.rb#11
    def __vc_development_mode?; end

    private

    # source://view_component//lib/view_component/compiler.rb#11
    def __class_attr___vc_development_mode; end

    # source://view_component//lib/view_component/compiler.rb#11
    def __class_attr___vc_development_mode=(new_value); end
  end
end

# source://view_component//lib/view_component/config.rb#6
class ViewComponent::Config
  # @return [Config] a new instance of Config
  #
  # source://view_component//lib/view_component/config.rb#181
  def initialize; end

  # Returns the current ViewComponent::Config. This is persisted against this
  # class so that config options remain accessible before the rest of
  # ViewComponent has loaded. Defaults to an instance of ViewComponent::Config
  # with all other documented defaults set.
  #
  # @return [ViewComponent::Config]
  #
  # source://view_component//lib/view_component/config.rb#179
  def current; end

  # Returns the current ViewComponent::Config. This is persisted against this
  # class so that config options remain accessible before the rest of
  # ViewComponent has loaded. Defaults to an instance of ViewComponent::Config
  # with all other documented defaults set.
  #
  # @return [ViewComponent::Config]
  #
  # source://view_component//lib/view_component/config.rb#179
  def current=(_arg0); end

  # source://view_component//lib/view_component/config.rb#185
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  private

  # Returns the value of attribute config.
  #
  # source://view_component//lib/view_component/config.rb#189
  def config; end

  # source://view_component//lib/view_component/config.rb#185
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # source://view_component//lib/view_component/config.rb#179
    def current; end

    # source://view_component//lib/view_component/config.rb#179
    def current=(value); end

    # `new` without any arguments initializes the default configuration, but
    # it's important to differentiate in case that's no longer the case in
    # future.
    #
    # source://view_component//lib/view_component/config.rb#11
    def default(*_arg0); end

    # source://view_component//lib/view_component/config.rb#155
    def default_generate_options; end

    # Whether ActiveSupport notifications are enabled.
    # Defaults to `false`.
    #
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/config.rb#131
    def default_preview_paths; end

    # source://view_component//lib/view_component/config.rb#162
    def default_previews_options; end

    # source://view_component//lib/view_component/config.rb#141
    def default_rails_engines_preview_paths; end

    # source://view_component//lib/view_component/config.rb#135
    def default_rails_preview_paths; end

    # source://view_component//lib/view_component/config.rb#13
    def defaults; end

    # source://view_component//lib/view_component/config.rb#149
    def registered_rails_engines_with_previews; end

    private

    # source://view_component//lib/view_component/config.rb#179
    def __class_attr_current; end

    # source://view_component//lib/view_component/config.rb#179
    def __class_attr_current=(new_value); end
  end
end

# source://view_component//lib/view_component/errors.rb#168
class ViewComponent::ContentAlreadySetForPolymorphicSlotError < ::StandardError
  # @return [ContentAlreadySetForPolymorphicSlotError] a new instance of ContentAlreadySetForPolymorphicSlotError
  #
  # source://view_component//lib/view_component/errors.rb#171
  def initialize(slot_name); end
end

# source://view_component//lib/view_component/errors.rb#169
ViewComponent::ContentAlreadySetForPolymorphicSlotError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#96
class ViewComponent::ContentSlotNameError < ::StandardError
  # @return [ContentSlotNameError] a new instance of ContentSlotNameError
  #
  # source://view_component//lib/view_component/errors.rb#102
  def initialize(klass_name); end
end

# source://view_component//lib/view_component/errors.rb#97
ViewComponent::ContentSlotNameError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#200
class ViewComponent::ControllerCalledBeforeRenderError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#201
ViewComponent::ControllerCalledBeforeRenderError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/deprecation.rb#6
ViewComponent::DEPRECATION_HORIZON = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/deprecation.rb#7
ViewComponent::Deprecation = T.let(T.unsafe(nil), ActiveSupport::Deprecation)

# source://view_component//lib/view_component/errors.rb#57
class ViewComponent::DuplicateContentError < ::StandardError
  # @return [DuplicateContentError] a new instance of DuplicateContentError
  #
  # source://view_component//lib/view_component/errors.rb#63
  def initialize(klass_name); end
end

# source://view_component//lib/view_component/errors.rb#58
ViewComponent::DuplicateContentError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#8
class ViewComponent::DuplicateSlotContentError < ::StandardError
  # @return [DuplicateSlotContentError] a new instance of DuplicateSlotContentError
  #
  # source://view_component//lib/view_component/errors.rb#14
  def initialize(klass_name); end
end

# source://view_component//lib/view_component/errors.rb#9
ViewComponent::DuplicateSlotContentError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/engine.rb#8
class ViewComponent::Engine < ::Rails::Engine; end

# source://view_component//lib/view_component/errors.rb#191
class ViewComponent::HelpersCalledBeforeRenderError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#192
ViewComponent::HelpersCalledBeforeRenderError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/inline_template.rb#4
module ViewComponent::InlineTemplate
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ViewComponent::InlineTemplate::ClassMethods
end

# source://view_component//lib/view_component/inline_template.rb#8
module ViewComponent::InlineTemplate::ClassMethods
  # source://view_component//lib/view_component/inline_template.rb#40
  def __vc_inline_template; end

  # source://view_component//lib/view_component/inline_template.rb#44
  def __vc_inline_template_language; end

  # source://view_component//lib/view_component/inline_template.rb#48
  def inherited(subclass); end

  # source://view_component//lib/view_component/inline_template.rb#9
  def method_missing(method, *args); end

  private

  # source://view_component//lib/view_component/inline_template.rb#36
  def respond_to_missing?(method, include_all = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/inline_template.rb#6
class ViewComponent::InlineTemplate::Template < ::Struct
  # Returns the value of attribute language
  #
  # @return [Object] the current value of language
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def language; end

  # Sets the attribute language
  #
  # @param value [Object] the value to set the attribute language to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def language=(_); end

  # Returns the value of attribute lineno
  #
  # @return [Object] the current value of lineno
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value [Object] the value to set the attribute lineno to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def lineno=(_); end

  # Returns the value of attribute path
  #
  # @return [Object] the current value of path
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def path; end

  # Sets the attribute path
  #
  # @param value [Object] the value to set the attribute path to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def path=(_); end

  # Returns the value of attribute source
  #
  # @return [Object] the current value of source
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def source; end

  # Sets the attribute source
  #
  # @param value [Object] the value to set the attribute source to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/inline_template.rb#6
  def source=(_); end

  class << self
    # source://view_component//lib/view_component/inline_template.rb#6
    def [](*_arg0); end

    # source://view_component//lib/view_component/inline_template.rb#6
    def inspect; end

    # source://view_component//lib/view_component/inline_template.rb#6
    def keyword_init?; end

    # source://view_component//lib/view_component/inline_template.rb#6
    def members; end

    # source://view_component//lib/view_component/inline_template.rb#6
    def new(*_arg0); end
  end
end

# source://view_component//lib/view_component/instrumentation.rb#6
module ViewComponent::Instrumentation
  # source://view_component//lib/view_component/instrumentation.rb#11
  def render_in(view_context, &block); end

  class << self
    # @private
    #
    # source://view_component//lib/view_component/instrumentation.rb#7
    def included(mod); end
  end
end

# source://view_component//lib/view_component/errors.rb#90
class ViewComponent::InvalidCollectionArgumentError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#91
ViewComponent::InvalidCollectionArgumentError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#107
class ViewComponent::InvalidSlotDefinitionError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#108
ViewComponent::InvalidSlotDefinitionError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#113
class ViewComponent::InvalidSlotNameError < ::StandardError; end

# source://view_component//lib/view_component/errors.rb#68
class ViewComponent::MissingCollectionArgumentError < ::StandardError
  # @return [MissingCollectionArgumentError] a new instance of MissingCollectionArgumentError
  #
  # source://view_component//lib/view_component/errors.rb#75
  def initialize(klass_name, parameter); end
end

# source://view_component//lib/view_component/errors.rb#69
ViewComponent::MissingCollectionArgumentError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#31
class ViewComponent::MissingPreviewTemplateError < ::StandardError
  # @return [MissingPreviewTemplateError] a new instance of MissingPreviewTemplateError
  #
  # source://view_component//lib/view_component/errors.rb#36
  def initialize(example); end
end

# source://view_component//lib/view_component/errors.rb#32
ViewComponent::MissingPreviewTemplateError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#41
class ViewComponent::MissingTemplateError < ::StandardError
  # @return [MissingTemplateError] a new instance of MissingTemplateError
  #
  # source://view_component//lib/view_component/errors.rb#46
  def initialize(component, request_detail); end
end

# source://view_component//lib/view_component/errors.rb#42
ViewComponent::MissingTemplateError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#27
class ViewComponent::MultipleInlineTemplatesError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#28
ViewComponent::MultipleInlineTemplatesError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#176
class ViewComponent::NilWithContentError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#177
ViewComponent::NilWithContentError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/preview.rb#6
class ViewComponent::Preview
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  extend ::ActiveSupport::DescendantsTracker

  # source://view_component//lib/view_component/preview.rb#9
  def default_url_options; end

  # source://view_component//lib/view_component/preview.rb#9
  def default_url_options=(_arg0); end

  # source://view_component//lib/view_component/preview.rb#9
  def default_url_options?; end

  # source://view_component//lib/view_component/preview.rb#16
  def render(component, **args, &block); end

  # source://view_component//lib/view_component/preview.rb#26
  def render_with_template(template: T.unsafe(nil), locals: T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://view_component//lib/view_component/preview.rb#96
    def __vc_load_previews; end

    # source://view_component//lib/view_component/preview.rb#9
    def _routes; end

    # Returns all component preview classes.
    #
    # source://view_component//lib/view_component/preview.rb#35
    def all; end

    # source://view_component//lib/view_component/preview.rb#9
    def default_url_options; end

    # source://view_component//lib/view_component/preview.rb#9
    def default_url_options=(value); end

    # source://view_component//lib/view_component/preview.rb#9
    def default_url_options?; end

    # Returns all of the available examples for the component preview.
    #
    # source://view_component//lib/view_component/preview.rb#53
    def examples; end

    # Returns +true+ if the preview exists.
    #
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/preview.rb#58
    def exists?(preview); end

    # Find a component preview by its underscored class name.
    #
    # source://view_component//lib/view_component/preview.rb#63
    def find(preview); end

    # Setter for layout name.
    #
    # source://view_component//lib/view_component/preview.rb#74
    def layout(layout_name); end

    # Returns the relative path (from preview_path) to the preview example template if the template exists
    #
    # @raise [MissingPreviewTemplateError]
    #
    # source://view_component//lib/view_component/preview.rb#80
    def preview_example_template_path(example); end

    # Returns the underscored name of the component preview without the suffix.
    #
    # source://view_component//lib/view_component/preview.rb#68
    def preview_name; end

    # Returns the arguments for rendering of the component in its layout
    #
    # source://view_component//lib/view_component/preview.rb#42
    def render_args(example, params: T.unsafe(nil)); end

    private

    # source://view_component//lib/view_component/preview.rb#9
    def __class_attr_default_url_options; end

    # source://view_component//lib/view_component/preview.rb#9
    def __class_attr_default_url_options=(new_value); end

    # source://view_component//lib/view_component/preview.rb#104
    def preview_paths; end
  end
end

module ViewComponent::PreviewActions
  extend ::ActiveSupport::Concern

  def index; end
  def previews; end

  private

  def default_preview_layout; end
  def determine_layout(layout_override = T.unsafe(nil), prepend_views: T.unsafe(nil)); end
  def find_preview; end
  def prepend_application_view_paths; end
  def prepend_preview_examples_view_path; end
  def previews_enabled?; end
  def set_locale(&block); end
end

# source://view_component//lib/view_component/errors.rb#128
class ViewComponent::RedefinedSlotError < ::StandardError
  # @return [RedefinedSlotError] a new instance of RedefinedSlotError
  #
  # source://view_component//lib/view_component/errors.rb#133
  def initialize(klass_name, slot_name); end
end

# source://view_component//lib/view_component/errors.rb#129
ViewComponent::RedefinedSlotError::MESSAGE = T.let(T.unsafe(nil), String)

# LookupContext computes and encapsulates @details for each request
# so that it doesn't need to be recomputed on each partial render.
# This data is wrapped in ActionView::TemplateDetails::Requested and
# used by instances of ActionView::Resolver to choose which template
# best matches the request.
#
# ActionView considers this logic internal to template/partial resolution.
# We're exposing it to the compiler via `refine` so that ViewComponent
# can match Rails' template picking logic.
#
# source://view_component//lib/view_component/request_details.rb#13
module ViewComponent::RequestDetails; end

# source://view_component//lib/view_component/errors.rb#80
class ViewComponent::ReservedParameterError < ::StandardError
  # @return [ReservedParameterError] a new instance of ReservedParameterError
  #
  # source://view_component//lib/view_component/errors.rb#85
  def initialize(klass_name, parameter); end
end

# source://view_component//lib/view_component/errors.rb#81
ViewComponent::ReservedParameterError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#148
class ViewComponent::ReservedPluralSlotNameError < ::ViewComponent::InvalidSlotNameError
  # @return [ReservedPluralSlotNameError] a new instance of ReservedPluralSlotNameError
  #
  # source://view_component//lib/view_component/errors.rb#153
  def initialize(klass_name, slot_name); end
end

# source://view_component//lib/view_component/errors.rb#149
ViewComponent::ReservedPluralSlotNameError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#138
class ViewComponent::ReservedSingularSlotNameError < ::ViewComponent::InvalidSlotNameError
  # @return [ReservedSingularSlotNameError] a new instance of ReservedSingularSlotNameError
  #
  # source://view_component//lib/view_component/errors.rb#143
  def initialize(klass_name, slot_name); end
end

# source://view_component//lib/view_component/errors.rb#139
ViewComponent::ReservedSingularSlotNameError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/slot.rb#6
class ViewComponent::Slot
  include ::ViewComponent::WithContentHelper

  # @return [Slot] a new instance of Slot
  #
  # source://view_component//lib/view_component/slot.rb#11
  def initialize(parent); end

  # Sets the attribute __vc_component_instance
  #
  # @param value the value to set the attribute __vc_component_instance to.
  #
  # source://view_component//lib/view_component/slot.rb#9
  def __vc_component_instance=(_arg0); end

  # Sets the attribute __vc_content
  #
  # @param value the value to set the attribute __vc_content to.
  #
  # source://view_component//lib/view_component/slot.rb#9
  def __vc_content=(_arg0); end

  # Sets the attribute __vc_content_block
  #
  # @param value the value to set the attribute __vc_content_block to.
  #
  # source://view_component//lib/view_component/slot.rb#9
  def __vc_content_block=(_arg0); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot.rb#15
  def content?; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot.rb#104
  def html_safe?; end

  # Allow access to public component methods via the wrapper
  #
  # for example
  #
  # calling `header.name` (where `header` is a slot) will call `name`
  # on the `HeaderComponent` instance.
  #
  # Where the component may look like:
  #
  # class MyComponent < ViewComponent::Base
  #   has_one :header, HeaderComponent
  #
  #   class HeaderComponent < ViewComponent::Base
  #     def name
  #       @name
  #     end
  #   end
  # end
  #
  # source://view_component//lib/view_component/slot.rb#100
  def method_missing(symbol, *args, **kwargs, &block); end

  # Used to render the slot content in the template
  #
  # There's currently 3 different values that may be set, that we can render.
  #
  # If the slot renderable is a component, the string class name of a
  # component, or a function that returns a component, we render that
  # component instance, returning the string.
  #
  # If the slot renderable is a function and returns a string, it's
  # set as `@__vc_content` and is returned directly.
  #
  # If there is no slot renderable, we evaluate the block passed to
  # the slot and return it.
  #
  # source://view_component//lib/view_component/slot.rb#45
  def to_s; end

  # source://view_component//lib/view_component/slot.rb#24
  def with_content(args); end

  private

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot.rb#114
  def __vc_component_instance?; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot.rb#108
  def respond_to_missing?(symbol, include_all = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/errors.rb#116
class ViewComponent::SlotPredicateNameError < ::ViewComponent::InvalidSlotNameError
  # @return [SlotPredicateNameError] a new instance of SlotPredicateNameError
  #
  # source://view_component//lib/view_component/errors.rb#123
  def initialize(klass_name, slot_name); end
end

# source://view_component//lib/view_component/errors.rb#117
ViewComponent::SlotPredicateNameError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/slotable.rb#8
module ViewComponent::Slotable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Slotable::ClassMethods

  # source://view_component//lib/view_component/slotable.rb#355
  def __vc_get_slot(slot_name); end

  # source://view_component//lib/view_component/slotable.rb#437
  def __vc_set_polymorphic_slot(slot_name, poly_type = T.unsafe(nil), *args, **kwargs, &block); end

  # source://view_component//lib/view_component/slotable.rb#380
  def __vc_set_slot(slot_name, slot_definition = T.unsafe(nil), *args, **kwargs, &block); end

  module GeneratedClassMethods
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end

  module GeneratedInstanceMethods
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end
end

# source://view_component//lib/view_component/slotable.rb#21
module ViewComponent::Slotable::ClassMethods
  # source://view_component//lib/view_component/slotable.rb#216
  def __vc_register_default_slots; end

  # source://view_component//lib/view_component/slotable.rb#198
  def inherited(child); end

  # source://view_component//lib/view_component/slotable.rb#144
  def renders_many(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/slotable.rb#75
  def renders_one(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/slotable.rb#187
  def slot_type(slot_name); end

  private

  # source://view_component//lib/view_component/slotable.rb#283
  def __vc_define_slot(slot_name, collection:, callable:); end

  # source://view_component//lib/view_component/slotable.rb#341
  def __vc_raise_if_slot_conflicts_with_call(slot_name); end

  # source://view_component//lib/view_component/slotable.rb#337
  def __vc_raise_if_slot_ends_with_question_mark(slot_name); end

  # source://view_component//lib/view_component/slotable.rb#347
  def __vc_raise_if_slot_name_uncountable(slot_name); end

  # source://view_component//lib/view_component/slotable.rb#331
  def __vc_raise_if_slot_registered(slot_name); end

  # source://view_component//lib/view_component/slotable.rb#231
  def __vc_register_polymorphic_slot(slot_name, types, collection:); end

  # source://view_component//lib/view_component/slotable.rb#227
  def __vc_register_slot(slot_name, **kwargs); end

  # source://view_component//lib/view_component/slotable.rb#306
  def __vc_validate_plural_slot_name(slot_name); end

  # source://view_component//lib/view_component/slotable.rb#317
  def __vc_validate_singular_slot_name(slot_name); end
end

# source://view_component//lib/view_component/slotable.rb#11
ViewComponent::Slotable::RESERVED_NAMES = T.let(T.unsafe(nil), Hash)

# source://view_component//lib/view_component/errors.rb#209
class ViewComponent::SystemTestControllerNefariousPathError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#210
ViewComponent::SystemTestControllerNefariousPathError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/template.rb#4
class ViewComponent::Template
  # @return [Template] a new instance of Template
  #
  # source://view_component//lib/view_component/template.rb#15
  def initialize(component:, details:, lineno: T.unsafe(nil), path: T.unsafe(nil)); end

  # source://view_component//lib/view_component/template.rb#129
  def call_method_name; end

  # source://view_component//lib/view_component/template.rb#97
  def compile_to_component; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/template.rb#124
  def default_format?; end

  # Returns the value of attribute details.
  #
  # source://view_component//lib/view_component/template.rb#10
  def details; end

  # source://view_component//lib/view_component/template.rb#13
  def format(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/template.rb#127
  def html?; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/template.rb#120
  def inline_call?; end

  # source://view_component//lib/view_component/template.rb#139
  def normalized_variant_name; end

  # Returns the value of attribute path.
  #
  # source://view_component//lib/view_component/template.rb#10
  def path; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/template.rb#116
  def requires_compiled_superclass?; end

  # source://view_component//lib/view_component/template.rb#135
  def safe_method_name; end

  # source://view_component//lib/view_component/template.rb#111
  def safe_method_name_call; end

  # source://view_component//lib/view_component/template.rb#13
  def variant(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/template.rb#12
  def virtual_path(*_arg0, **_arg1, &_arg2); end

  private

  # source://view_component//lib/view_component/template.rb#145
  def compiled_source; end
end

# source://view_component//lib/view_component/template.rb#5
ViewComponent::Template::DEFAULT_FORMAT = T.let(T.unsafe(nil), Symbol)

# source://view_component//lib/view_component/template.rb#8
class ViewComponent::Template::DataWithSource < ::Struct
  # Returns the value of attribute format
  #
  # @return [Object] the current value of format
  #
  # source://view_component//lib/view_component/template.rb#8
  def format; end

  # Sets the attribute format
  #
  # @param value [Object] the value to set the attribute format to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/template.rb#8
  def format=(_); end

  # Returns the value of attribute identifier
  #
  # @return [Object] the current value of identifier
  #
  # source://view_component//lib/view_component/template.rb#8
  def identifier; end

  # Sets the attribute identifier
  #
  # @param value [Object] the value to set the attribute identifier to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/template.rb#8
  def identifier=(_); end

  # Returns the value of attribute short_identifier
  #
  # @return [Object] the current value of short_identifier
  #
  # source://view_component//lib/view_component/template.rb#8
  def short_identifier; end

  # Sets the attribute short_identifier
  #
  # @param value [Object] the value to set the attribute short_identifier to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/template.rb#8
  def short_identifier=(_); end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  #
  # source://view_component//lib/view_component/template.rb#8
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  #
  # source://view_component//lib/view_component/template.rb#8
  def type=(_); end

  class << self
    # source://view_component//lib/view_component/template.rb#8
    def [](*_arg0); end

    # source://view_component//lib/view_component/template.rb#8
    def inspect; end

    # source://view_component//lib/view_component/template.rb#8
    def keyword_init?; end

    # source://view_component//lib/view_component/template.rb#8
    def members; end

    # source://view_component//lib/view_component/template.rb#8
    def new(*_arg0); end
  end
end

# source://view_component//lib/view_component/template.rb#22
class ViewComponent::Template::File < ::ViewComponent::Template
  # @return [File] a new instance of File
  #
  # source://view_component//lib/view_component/template.rb#23
  def initialize(component:, details:, path:); end

  # Load file each time we look up #source in case the file has been modified
  #
  # source://view_component//lib/view_component/template.rb#37
  def source; end

  # source://view_component//lib/view_component/template.rb#32
  def type; end
end

# source://view_component//lib/view_component/template.rb#42
class ViewComponent::Template::Inline < ::ViewComponent::Template
  # @return [Inline] a new instance of Inline
  #
  # source://view_component//lib/view_component/template.rb#45
  def initialize(component:, inline_template:); end

  # Returns the value of attribute source.
  #
  # source://view_component//lib/view_component/template.rb#43
  def source; end

  # source://view_component//lib/view_component/template.rb#58
  def type; end
end

# source://view_component//lib/view_component/template.rb#63
class ViewComponent::Template::InlineCall < ::ViewComponent::Template
  # @return [InlineCall] a new instance of InlineCall
  #
  # source://view_component//lib/view_component/template.rb#64
  def initialize(component:, method_name:, defined_on_self:); end

  # source://view_component//lib/view_component/template.rb#78
  def compile_to_component; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/template.rb#92
  def defined_on_self?; end

  # source://view_component//lib/view_component/template.rb#82
  def safe_method_name_call; end

  # source://view_component//lib/view_component/template.rb#74
  def type; end
end

# source://view_component//lib/view_component/errors.rb#19
class ViewComponent::TemplateError < ::StandardError
  # @return [TemplateError] a new instance of TemplateError
  #
  # source://view_component//lib/view_component/errors.rb#20
  def initialize(errors, templates = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/translatable.rb#8
module ViewComponent::Translatable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Translatable::ClassMethods

  # source://view_component//lib/view_component/translatable.rb#124
  def __vc_i18n_scope; end

  # @raise [ViewComponent::TranslateCalledBeforeRenderError]
  #
  # source://view_component//lib/view_component/translatable.rb#122
  def t(key = T.unsafe(nil), **options); end

  # @raise [ViewComponent::TranslateCalledBeforeRenderError]
  #
  # source://view_component//lib/view_component/translatable.rb#93
  def translate(key = T.unsafe(nil), **options); end

  private

  # source://view_component//lib/view_component/translatable.rb#141
  def __vc_html_escape_translation_options!(options); end

  # source://view_component//lib/view_component/translatable.rb#130
  def __vc_html_safe_translation(translation); end

  module GeneratedClassMethods
    def __vc_i18n_backend; end
    def __vc_i18n_backend=(value); end
  end

  module GeneratedInstanceMethods
    def __vc_i18n_backend; end
  end
end

# source://view_component//lib/view_component/translatable.rb#21
module ViewComponent::Translatable::ClassMethods
  # source://view_component//lib/view_component/translatable.rb#26
  def __vc_build_i18n_backend; end

  # source://view_component//lib/view_component/translatable.rb#46
  def __vc_i18n_key(key, scope = T.unsafe(nil)); end

  # source://view_component//lib/view_component/translatable.rb#22
  def __vc_i18n_scope; end

  # source://view_component//lib/view_component/translatable.rb#65
  def t(key = T.unsafe(nil), **options); end

  # source://view_component//lib/view_component/translatable.rb#54
  def translate(key = T.unsafe(nil), **options); end
end

# source://view_component//lib/view_component/translatable.rb#11
ViewComponent::Translatable::HTML_SAFE_TRANSLATION_KEY = T.let(T.unsafe(nil), Regexp)

# source://view_component//lib/view_component/translatable.rb#68
class ViewComponent::Translatable::I18nBackend < ::I18n::Backend::Simple
  # @return [I18nBackend] a new instance of I18nBackend
  #
  # source://view_component//lib/view_component/translatable.rb#71
  def initialize(scope:, load_paths:); end

  # Ensure the Simple backend won't load paths from ::I18n.load_path
  #
  # source://view_component//lib/view_component/translatable.rb#77
  def load_translations; end

  # source://view_component//lib/view_component/translatable.rb#81
  def scope_data(data); end

  # source://view_component//lib/view_component/translatable.rb#88
  def store_translations(locale, data, options = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/translatable.rb#69
ViewComponent::Translatable::I18nBackend::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://view_component//lib/view_component/translatable.rb#14
ViewComponent::Translatable::TRANSLATION_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://view_component//lib/view_component/errors.rb#182
class ViewComponent::TranslateCalledBeforeRenderError < ::ViewComponent::BaseError; end

# source://view_component//lib/view_component/errors.rb#183
ViewComponent::TranslateCalledBeforeRenderError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/errors.rb#158
class ViewComponent::UncountableSlotNameError < ::ViewComponent::InvalidSlotNameError
  # @return [UncountableSlotNameError] a new instance of UncountableSlotNameError
  #
  # source://view_component//lib/view_component/errors.rb#163
  def initialize(klass_name, slot_name); end
end

# source://view_component//lib/view_component/errors.rb#159
ViewComponent::UncountableSlotNameError::MESSAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component/with_content_helper.rb#4
module ViewComponent::WithContentHelper
  # @raise [NilWithContentError]
  #
  # source://view_component//lib/view_component/with_content_helper.rb#5
  def with_content(value); end
end

class ViewComponentsController < ::Rails::ApplicationController
  include ::ViewComponent::PreviewActions

  private

  def _layout(lookup_context, formats, keys); end

  class << self
    private

    def __class_attr___callbacks; end
    def __class_attr___callbacks=(new_value); end
    def __class_attr_middleware_stack; end
    def __class_attr_middleware_stack=(new_value); end
  end
end

class ViewComponentsSystemTestController < ::ActionController::Base
  private

  def _layout(lookup_context, formats, keys); end

  class << self
    private

    def __class_attr_middleware_stack; end
    def __class_attr_middleware_stack=(new_value); end
  end
end
