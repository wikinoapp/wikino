# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `get_process_mem` gem.
# Please instead update this file by running `bin/tapioca gem get_process_mem`.

# Cribbed from Unicorn Worker Killer, thanks!
class GetProcessMem
  # @return [GetProcessMem] a new instance of GetProcessMem
  def initialize(pid = T.unsafe(nil)); end

  def bytes; end
  def darwin_memory; end
  def gb(b = T.unsafe(nil)); end
  def inspect; end
  def kb(b = T.unsafe(nil)); end

  # @return [Boolean]
  def linux?; end

  # linux stores detailed memory info in a file "/proc/#{pid}/smaps"
  def linux_memory(file = T.unsafe(nil)); end

  # linux stores memory info in a file "/proc/#{pid}/status"
  # If it's available it uses less resources than shelling out to ps
  def linux_status_memory(file = T.unsafe(nil)); end

  def mb(b = T.unsafe(nil)); end

  # Returns the value of attribute pid.
  def pid; end

  # Pull memory from `ps` command, takes more resources and can freeze
  # in low memory situations
  def ps_memory; end

  private

  def number_to_bigdecimal(value); end

  class << self
    private

    def number_to_bigdecimal(value); end
  end
end

GetProcessMem::CONVERSION = T.let(T.unsafe(nil), Hash)

class GetProcessMem::Darwin
  extend ::FFI::Library

  def proc_pidinfo(*_arg0); end

  class << self
    def proc_pidinfo(*_arg0); end
    def resident_size(pid); end

    private

    def get_proc_pidinfo(pid); end
  end
end

# from sys/proc_info.h
GetProcessMem::Darwin::PROC_PIDTASKINFO = T.let(T.unsafe(nil), Integer)

class GetProcessMem::Darwin::TaskInfo < ::FFI::Struct; end

# 1024**3 = 1_073_741_824
GetProcessMem::GB_TO_BYTE = T.let(T.unsafe(nil), BigDecimal)

# 2**10   = 1024
GetProcessMem::KB_TO_BYTE = T.let(T.unsafe(nil), BigDecimal)

# 1024**2 = 1_048_576
GetProcessMem::MB_TO_BYTE = T.let(T.unsafe(nil), BigDecimal)

GetProcessMem::ROUND_UP = T.let(T.unsafe(nil), BigDecimal)
GetProcessMem::RUNS_ON_DARWIN = T.let(T.unsafe(nil), Gem::Platform)
