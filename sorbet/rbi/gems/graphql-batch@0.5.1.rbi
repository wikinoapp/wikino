# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-batch` gem.
# Please instead update this file by running `bin/tapioca gem graphql-batch`.

module GraphQL
  class << self
    def default_parser; end

    # Sets the attribute default_parser
    #
    # @param value the value to set the attribute default_parser to.
    def default_parser=(_arg0); end

    # Turn a query string or schema definition into an AST
    #
    # @param graphql_string [String] a GraphQL query string or schema definition
    # @return [GraphQL::Language::Nodes::Document]
    def parse(graphql_string, tracer: T.unsafe(nil)); end

    # Read the contents of `filename` and parse them as GraphQL
    #
    # @param filename [String] Path to a `.graphql` file containing IDL or query
    # @return [GraphQL::Language::Nodes::Document]
    def parse_file(filename); end

    def parse_with_racc(string, filename: T.unsafe(nil), tracer: T.unsafe(nil)); end

    # @return [Array<GraphQL::Language::Token>]
    def scan(graphql_string); end

    def scan_with_ragel(graphql_string); end
  end
end

module GraphQL::Batch
  class << self
    def batch(executor_class: T.unsafe(nil)); end
    def use(schema_defn, executor_class: T.unsafe(nil)); end
  end
end

GraphQL::Batch::BrokenPromiseError = Promise::BrokenError

class GraphQL::Batch::Executor
  # @return [Executor] a new instance of Executor
  def initialize; end

  def around_promise_callbacks; end
  def clear; end
  def decrement_level; end
  def increment_level; end
  def loader(key); end

  # Set to true when performing a batch query, otherwise, it is false.
  #
  # Can be used to detect unbatched queries in an ActiveSupport::Notifications.subscribe block.
  def loading; end

  def resolve(loader); end
  def tick; end
  def wait_all; end

  class << self
    def current; end
    def current=(executor); end
    def end_batch; end
    def start_batch(executor_class); end
  end
end

GraphQL::Batch::Executor::THREAD_KEY = T.let(T.unsafe(nil), Symbol)

class GraphQL::Batch::Loader
  # Returns the value of attribute executor.
  def executor; end

  # Sets the attribute executor
  #
  # @param value the value to set the attribute executor to.
  def executor=(_arg0); end

  def load(key); end
  def load_many(keys); end

  # Returns the value of attribute loader_key.
  def loader_key; end

  # Sets the attribute loader_key
  #
  # @param value the value to set the attribute loader_key to.
  def loader_key=(_arg0); end

  def resolve; end

  # @return [Boolean]
  def resolved?; end

  # For Promise#sync
  def wait; end

  protected

  # Override to use a different key for the cache than the load key
  def cache_key(load_key); end

  # Fulfill the key with provided value, for use in #perform
  def fulfill(key, value); end

  # Returns true when the key has already been fulfilled, otherwise returns false
  #
  # @return [Boolean]
  def fulfilled?(key); end

  # Must override to load the keys and call #fulfill for each key
  #
  # @raise [NotImplementedError]
  def perform(keys); end

  def reject(key, reason); end

  private

  def cache; end
  def check_for_broken_promises(load_keys); end
  def finish_resolve(key); end
  def promise_for(load_key); end
  def queue; end
  def reject_pending_promises(load_keys, err); end

  class << self
    def for(*_arg0, **_arg1, &_arg2); end
    def load(key); end
    def load_many(keys); end
    def loader_key_for(*group_args, **group_kwargs); end

    private

    def current_executor; end
  end
end

class GraphQL::Batch::NoExecutorError < ::StandardError; end

class GraphQL::Batch::SetupMultiplex
  # @return [SetupMultiplex] a new instance of SetupMultiplex
  def initialize(schema, executor_class:); end

  def after_multiplex(multiplex); end
  def before_multiplex(multiplex); end
end

GraphQL::Batch::VERSION = T.let(T.unsafe(nil), String)
GraphQL::VERSION = T.let(T.unsafe(nil), String)
