# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `omniauth-auth0` gem.
# Please instead update this file by running `bin/tapioca gem omniauth-auth0`.

module OmniAuth
  class << self
    def config; end

    # @yield [config]
    def configure; end

    def logger; end
    def mock_auth_for(provider); end
    def strategies; end
  end
end

module OmniAuth::Auth0; end

# JWT Validator class
class OmniAuth::Auth0::JWTValidator
  # Initializer
  #
  # @param options object
  #   options.domain - Application domain.
  #   options.issuer - Application issuer (optional).
  #   options.client_id - Application Client ID.
  #   options.client_secret - Application Client Secret.
  # @return [JWTValidator] a new instance of JWTValidator
  def initialize(options, authorize_params = T.unsafe(nil)); end

  # Decodes a JWT and verifies it's signature. Only tokens signed with the RS256 or HS256 signatures are supported.
  #
  # @param jwt string - JWT to verify.
  # @return hash - The decoded token, if there were no exceptions.
  # @see https://github.com/jwt/ruby-jwt
  def decode(jwt); end

  # Returns the value of attribute domain.
  def domain; end

  # Sets the attribute domain
  #
  # @param value the value to set the attribute domain to.
  def domain=(_arg0); end

  # Returns the value of attribute issuer.
  def issuer; end

  # Sets the attribute issuer
  #
  # @param value the value to set the attribute issuer to.
  def issuer=(_arg0); end

  # Return a specific key from a JWKS object.
  #
  # @param key string - Key to find in the JWKS.
  # @param kid string - Key ID to identify the right JWK.
  # @return nil|string
  def jwks_key(key, kid); end

  # Get the JWKS from the issuer and return a public key.
  #
  # @param x5c string - X.509 certificate chain from a JWKS.
  # @return key - The X.509 certificate public key.
  def jwks_public_cert(x5c); end

  # Get the decoded head segment from a JWT.
  #
  # @return hash - The parsed head of the JWT passed, empty hash if not.
  def token_head(jwt); end

  # Verify a JWT.
  #
  # @param jwt string - JWT to verify.
  # @param authorize_params hash - Authorization params to verify on the JWT
  # @return hash - The verified token payload, if there were no exceptions.
  def verify(jwt, authorize_params = T.unsafe(nil)); end

  # Verify a token's signature. Only tokens signed with the RS256 or HS256 signatures are supported.
  # Deprecated: Please use `decode` instead
  #
  # @return array - The token's key and signing algorithm
  def verify_signature(jwt); end

  private

  # Rails Active Support blank method.
  #
  # @param obj object - Object to check for blankness.
  # @return [Boolean] boolean
  def blank?(obj); end

  # Get the JWT decode options. We disable the claim checks since we perform our claim validation logic
  # Docs: https://github.com/jwt/ruby-jwt
  #
  # @return hash
  def decode_opts(alg); end

  def extract_key(head); end

  # Parse JSON with symbolized names.
  #
  # @param json string - JSON to parse.
  # @return hash
  def json_parse(json); end

  # Get a JWKS from the domain
  #
  # @return void
  def jwks; end

  def rs256_decode_key(kid); end

  # Parse a URI into the desired string format
  #
  # @param uri - the URI to parse
  # @return string
  def uri_string(uri); end

  def verify_aud(id_token); end
  def verify_auth_time(id_token, leeway, max_age); end
  def verify_azp(id_token); end
  def verify_claims(id_token, authorize_params); end
  def verify_expiration(id_token, leeway); end
  def verify_iat(id_token); end
  def verify_iss(id_token); end
  def verify_nonce(id_token, nonce); end
  def verify_org(id_token, organization); end
  def verify_sub(id_token); end
end

# Module to provide necessary telemetry for API requests.
module OmniAuth::Auth0::Telemetry
  # Return a telemetry hash to be encoded and sent to Auth0.
  #
  # @return hash
  def telemetry; end

  # JSON-ify and base64 encode the current telemetry.
  #
  # @return string
  def telemetry_encoded; end

  private

  def add_rails_version(telemetry); end
end

class OmniAuth::Auth0::TokenValidationError < ::StandardError
  # @return [TokenValidationError] a new instance of TokenValidationError
  def initialize(msg); end

  # Returns the value of attribute error_reason.
  def error_reason; end
end

OmniAuth::Auth0::VERSION = T.let(T.unsafe(nil), String)
module OmniAuth::Strategies; end

# Auth0 OmniAuth strategy
class OmniAuth::Strategies::Auth0 < ::OmniAuth::Strategies::OAuth2
  include ::OmniAuth::Auth0::Telemetry

  # Define the parameters used for the /authorize endpoint
  def authorize_params; end

  def build_access_token; end
  def callback_phase; end

  # Setup client URLs used during authentication
  def client; end

  # Declarative override for the request phase of authentication
  def request_phase; end

  private

  # Normalize a domain to a URL.
  def domain_url; end

  def jwt_validator; end

  # Check if the options include a client_id
  #
  # @return [Boolean]
  def no_client_id?; end

  # Check if the options include a client_secret
  #
  # @return [Boolean]
  def no_client_secret?; end

  # Check if the options include a domain
  #
  # @return [Boolean]
  def no_domain?; end

  # Parse the raw user info.
  def raw_info; end
end
