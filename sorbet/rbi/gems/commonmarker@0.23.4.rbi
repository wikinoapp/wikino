# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `commonmarker` gem.
# Please instead update this file by running `bin/tapioca gem commonmarker`.

module CommonMarker
  class << self
    def extensions; end

    # Public: Parses a Markdown string into a `document` node.
    #
    # string - {String} to be parsed
    # option - A {Symbol} or {Array of Symbol}s indicating the parse options
    # extensions - An {Array of Symbol}s indicating the extensions to use
    #
    # Returns the `document` node.
    #
    # @raise [TypeError]
    def render_doc(text, options = T.unsafe(nil), extensions = T.unsafe(nil)); end

    # Public:  Parses a Markdown string into an HTML string.
    #
    # text - A {String} of text
    # option - Either a {Symbol} or {Array of Symbol}s indicating the render options
    # extensions - An {Array of Symbol}s indicating the extensions to use
    #
    # Returns a {String} of converted HTML.
    #
    # @raise [TypeError]
    def render_html(text, options = T.unsafe(nil), extensions = T.unsafe(nil)); end
  end
end

# For Ruby::Enum, these must be classes, not modules
module CommonMarker::Config
  class << self
    def process_options(option, type); end
  end
end

# See https://github.com/github/cmark-gfm/blob/master/src/cmark-gfm.h#L673
CommonMarker::Config::OPTS = T.let(T.unsafe(nil), Hash)

class CommonMarker::HtmlRenderer < ::CommonMarker::Renderer
  def blockquote(node); end
  def code(node); end
  def code_block(node); end
  def document(_); end
  def emph(_); end
  def footnote_definition(_); end
  def footnote_reference(node); end
  def header(node); end
  def hrule(node); end
  def html(node); end
  def image(node); end
  def inline_html(node); end
  def linebreak(_node); end
  def link(node); end
  def list(node); end
  def list_item(node); end
  def paragraph(node); end
  def softbreak(_); end
  def strikethrough(_); end
  def strong(_); end
  def table(node); end
  def table_cell(node); end
  def table_header(node); end
  def table_row(node); end
  def tasklist(node); end
  def text(node); end

  private

  # @return [Boolean]
  def checked?(node); end

  def out_footnote_backref; end

  # @return [Boolean]
  def tasklist?(node); end
end

class CommonMarker::Node
  include ::Enumerable
  include ::CommonMarker::Node::Inspect

  def _render_commonmark(*_arg0); end
  def _render_html(_arg0, _arg1); end
  def _render_plaintext(*_arg0); end
  def _render_xml(_arg0); end
  def append_child(_arg0); end
  def delete; end

  # Public: Iterate over the children (if any) of the current pointer.
  def each; end

  # Deprecated: Please use `each` instead
  def each_child(&block); end

  def fence_info; end
  def fence_info=(_arg0); end
  def first_child; end
  def header_level; end
  def header_level=(_arg0); end
  def html_escape_href(_arg0); end
  def html_escape_html(_arg0); end
  def insert_after(_arg0); end
  def insert_before(_arg0); end
  def last_child; end
  def list_start; end
  def list_start=(_arg0); end
  def list_tight; end
  def list_tight=(_arg0); end
  def list_type; end
  def list_type=(_arg0); end
  def next; end
  def parent; end
  def prepend_child(_arg0); end
  def previous; end
  def sourcepos; end
  def string_content; end
  def string_content=(_arg0); end
  def table_alignments; end
  def tasklist_item_checked=(_arg0); end
  def tasklist_item_checked?; end
  def tasklist_state; end
  def title; end
  def title=(_arg0); end

  # Public: Convert the node to a CommonMark string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  # width - Column to wrap the output at
  #
  # Returns a {String}.
  def to_commonmark(options = T.unsafe(nil), width = T.unsafe(nil)); end

  # Public: Convert the node to an HTML string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  # extensions - An {Array of Symbol}s indicating the extensions to use
  #
  # Returns a {String}.
  def to_html(options = T.unsafe(nil), extensions = T.unsafe(nil)); end

  # Public: Convert the node to a plain text string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  # width - Column to wrap the output at
  #
  # Returns a {String}.
  def to_plaintext(options = T.unsafe(nil), width = T.unsafe(nil)); end

  # Public: Convert the node to an XML string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  #
  # Returns a {String}.
  def to_xml(options = T.unsafe(nil)); end

  def type; end
  def type_string; end
  def url; end
  def url=(_arg0); end

  # Public: An iterator that "walks the tree," descending into children recursively.
  #
  # blk - A {Proc} representing the action to take for each child
  #
  # @yield [_self]
  # @yieldparam _self [CommonMarker::Node] the object that the method was called on
  def walk(&block); end

  class << self
    def markdown_to_html(_arg0, _arg1, _arg2); end
    def markdown_to_xml(_arg0, _arg1, _arg2); end
    def new(_arg0); end
    def parse_document(_arg0, _arg1, _arg2, _arg3); end
  end
end

module CommonMarker::Node::Inspect
  def inspect; end

  # @param printer [PrettyPrint] pp
  def pretty_print(printer); end
end

CommonMarker::Node::Inspect::PP_INDENT_SIZE = T.let(T.unsafe(nil), Integer)
class CommonMarker::NodeError < ::StandardError; end

class CommonMarker::Renderer
  # @return [Renderer] a new instance of Renderer
  def initialize(options: T.unsafe(nil), extensions: T.unsafe(nil)); end

  def block; end
  def blocksep; end
  def code_block(node); end
  def container(starter, ender); end
  def containersep; end
  def cr; end
  def document(_node); end

  # Returns the value of attribute in_plain.
  def in_plain; end

  # Sets the attribute in_plain
  #
  # @param value the value to set the attribute in_plain to.
  def in_plain=(_arg0); end

  # Returns the value of attribute in_tight.
  def in_tight; end

  # Sets the attribute in_tight
  #
  # @param value the value to set the attribute in_tight to.
  def in_tight=(_arg0); end

  def out(*args); end
  def plain; end
  def reference_def(_node); end
  def render(node); end

  # Returns the value of attribute warnings.
  def warnings; end

  # Sets the attribute warnings
  #
  # @param value the value to set the attribute warnings to.
  def warnings=(_arg0); end

  private

  def escape_href(str); end
  def escape_html(str); end

  # @return [Boolean]
  def option_enabled?(opt); end

  def sourcepos(node); end
  def tagfilter(str); end
end

CommonMarker::VERSION = T.let(T.unsafe(nil), String)
