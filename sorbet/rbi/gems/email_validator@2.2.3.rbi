# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `email_validator` gem.
# Please instead update this file by running `bin/tapioca gem email_validator`.

# EmailValidator class
class EmailValidator < ::ActiveModel::EachValidator
  def validate_each(record, attribute, value); end

  class << self
    def default_options; end

    # @return [Boolean]
    def invalid?(value, options = T.unsafe(nil)); end

    # Refs:
    #  https://tools.ietf.org/html/rfc2822 : 3.2. Lexical Tokens, 3.4.1. Addr-spec specification
    #  https://tools.ietf.org/html/rfc5321 : 4.1.2.  Command Argument Syntax
    def regexp(options = T.unsafe(nil)); end

    # @return [Boolean]
    def valid?(value, options = T.unsafe(nil)); end

    protected

    def address_literal; end
    def alnum; end
    def alnumhy; end
    def alpha; end
    def atom_char; end

    # splitting this up into separate regex pattern for performance; let's not
    # try the "contains" pattern unless we have to
    def domain_label_pattern; end

    def domain_part_is_correct_length; end
    def domain_part_pattern(options); end
    def fqdn_pattern; end
    def host_label_pattern; end
    def ipv4; end
    def ipv6; end
    def label_contains_no_more_than_one_consecutive_hyphen; end
    def label_is_correct_length; end
    def local_part_pattern; end
    def loose_regexp(options = T.unsafe(nil)); end
    def rfc_regexp(options = T.unsafe(nil)); end
    def strict_regexp(options = T.unsafe(nil)); end

    # While, techincally, TLDs can be numeric-only, this is not allowed by ICANN
    # Ref: ICANN Application Guidebook for new TLDs (June 2012)
    #      says the following starting at page 64:
    #
    #      > The ASCII label must consist entirely of letters (alphabetic characters a-z)
    #
    #      -- https://newgtlds.icann.org/en/applicants/agb/guidebook-full-04jun12-en.pdf
    def tld_label_pattern; end

    private

    def parse_options(options); end
  end
end

# EmailValidator::Error class
class EmailValidator::Error < ::StandardError
  # @return [Error] a new instance of Error
  def initialize(msg = T.unsafe(nil)); end
end
